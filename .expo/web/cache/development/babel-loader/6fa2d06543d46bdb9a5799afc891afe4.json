{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogBoxInspector = exports.LogBoxInspectorContainer = void 0;\nvar react_1 = __importStar(require(\"react\"));\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar LogBoxData = __importStar(require(\"./Data/LogBoxData\"));\nvar LogContext_1 = require(\"./Data/LogContext\");\nvar LogBoxStyle = __importStar(require(\"./UI/LogBoxStyle\"));\nvar LogBoxInspectorCodeFrame_1 = require(\"./overlay/LogBoxInspectorCodeFrame\");\nvar LogBoxInspectorFooter_1 = require(\"./overlay/LogBoxInspectorFooter\");\nvar LogBoxInspectorHeader_1 = require(\"./overlay/LogBoxInspectorHeader\");\nvar LogBoxInspectorMessageHeader_1 = require(\"./overlay/LogBoxInspectorMessageHeader\");\nvar LogBoxInspectorStackFrames_1 = require(\"./overlay/LogBoxInspectorStackFrames\");\nvar HEADER_TITLE_MAP = {\n  warn: \"Console Warning\",\n  error: \"Console Error\",\n  fatal: \"Uncaught Error\",\n  syntax: \"Syntax Error\",\n  component: \"Render Error\"\n};\nfunction LogBoxInspectorContainer() {\n  var _ref = (0, LogContext_1.useLogs)(),\n    selectedLogIndex = _ref.selectedLogIndex,\n    logs = _ref.logs;\n  var log = logs[selectedLogIndex];\n  if (log == null) {\n    return null;\n  }\n  return react_1.default.createElement(LogBoxInspector, {\n    log: log,\n    selectedLogIndex: selectedLogIndex,\n    logs: logs\n  });\n}\nexports.LogBoxInspectorContainer = LogBoxInspectorContainer;\nfunction LogBoxInspector(_ref2) {\n  var log = _ref2.log,\n    selectedLogIndex = _ref2.selectedLogIndex,\n    logs = _ref2.logs;\n  var onDismiss = (0, react_1.useCallback)(function () {\n    var logsArray = Array.from(logs);\n    if (selectedLogIndex != null) {\n      if (logsArray.length - 1 <= 0) {\n        LogBoxData.setSelectedLog(-1);\n      } else if (selectedLogIndex >= logsArray.length - 1) {\n        LogBoxData.setSelectedLog(selectedLogIndex - 1);\n      }\n      LogBoxData.dismiss(logsArray[selectedLogIndex]);\n    }\n  }, [selectedLogIndex]);\n  var onMinimize = (0, react_1.useCallback)(function () {\n    LogBoxData.setSelectedLog(-1);\n  }, []);\n  var onChangeSelectedIndex = (0, react_1.useCallback)(function (index) {\n    LogBoxData.setSelectedLog(index);\n  }, []);\n  (0, react_1.useEffect)(function () {\n    if (log) {\n      LogBoxData.symbolicateLogNow(\"stack\", log);\n      LogBoxData.symbolicateLogNow(\"component\", log);\n    }\n  }, [log]);\n  (0, react_1.useEffect)(function () {\n    if (logs.length > 1) {\n      var selected = selectedLogIndex;\n      var lastIndex = logs.length - 1;\n      var prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;\n      var nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;\n      for (var type of [\"component\", \"stack\"]) {\n        LogBoxData.symbolicateLogLazy(type, logs[prevIndex]);\n        LogBoxData.symbolicateLogLazy(type, logs[nextIndex]);\n      }\n    }\n  }, [logs, selectedLogIndex]);\n  (0, react_1.useEffect)(function () {\n    react_native_1.Keyboard.dismiss();\n  }, []);\n  var _handleRetry = (0, react_1.useCallback)(function (type) {\n    LogBoxData.retrySymbolicateLogNow(type, log);\n  }, [log]);\n  return react_1.default.createElement(react_native_1.View, {\n    style: [react_native_1.StyleSheet.absoluteFill, {\n      flex: 1\n    }]\n  }, react_1.default.createElement(LogBoxInspectorHeader_1.LogBoxInspectorHeader, {\n    onSelectIndex: onChangeSelectedIndex,\n    level: log.level\n  }), react_1.default.createElement(ErrorOverlayBody, {\n    onRetry: _handleRetry\n  }), react_1.default.createElement(LogBoxInspectorFooter_1.LogBoxInspectorFooter, {\n    onDismiss: onDismiss,\n    onMinimize: onMinimize\n  }));\n}\nexports.LogBoxInspector = LogBoxInspector;\nfunction ErrorOverlayBody(_ref3) {\n  var onRetry = _ref3.onRetry;\n  var _a, _b;\n  var log = (0, LogContext_1.useSelectedLog)();\n  var _ref4 = (0, react_1.useState)(true),\n    _ref5 = _slicedToArray(_ref4, 2),\n    collapsed = _ref5[0],\n    setCollapsed = _ref5[1];\n  (0, react_1.useEffect)(function () {\n    setCollapsed(true);\n  }, [log]);\n  var headerTitle = (_a = HEADER_TITLE_MAP[log.isComponentError ? \"component\" : log.level]) !== null && _a !== void 0 ? _a : log.type;\n  var header = react_1.default.createElement(LogBoxInspectorMessageHeader_1.LogBoxInspectorMessageHeader, {\n    collapsed: collapsed,\n    onPress: function onPress() {\n      return setCollapsed(!collapsed);\n    },\n    message: log.message,\n    level: log.level,\n    title: headerTitle\n  });\n  var content = react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(LogBoxInspectorCodeFrame_1.LogBoxInspectorCodeFrame, {\n    codeFrame: log.codeFrame\n  }), react_1.default.createElement(LogBoxInspectorStackFrames_1.LogBoxInspectorStackFrames, {\n    type: \"stack\",\n    onRetry: onRetry.bind(onRetry, \"stack\")\n  }), !!((_b = log === null || log === void 0 ? void 0 : log.componentStack) === null || _b === void 0 ? void 0 : _b.length) && react_1.default.createElement(LogBoxInspectorStackFrames_1.LogBoxInspectorStackFrames, {\n    type: \"component\",\n    onRetry: onRetry.bind(onRetry, \"component\")\n  }));\n  if (collapsed) {\n    return react_1.default.createElement(react_1.default.Fragment, null, header, react_1.default.createElement(react_native_1.ScrollView, {\n      style: styles.scrollBody\n    }, content));\n  }\n  return react_1.default.createElement(react_native_1.ScrollView, {\n    style: styles.scrollBody\n  }, header, content);\n}\nvar styles = react_native_1.StyleSheet.create({\n  scrollBody: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(1),\n    flex: 1\n  }\n});\nexports.default = LogBoxData.withSubscription(LogBoxInspectorContainer);","map":{"version":3,"mappings":"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","names":["HEADER_TITLE_MAP","warn","error","fatal","syntax","component","LogBoxInspectorContainer","selectedLogIndex","logs","log","react_1","LogBoxInspector","exports","onDismiss","logsArray","Array","from","length","LogBoxData","setSelectedLog","dismiss","onMinimize","onChangeSelectedIndex","index","symbolicateLogNow","selected","lastIndex","prevIndex","nextIndex","type","symbolicateLogLazy","react_native_1","_handleRetry","retrySymbolicateLogNow","style","absoluteFill","flex","LogBoxInspectorHeader_1","onSelectIndex","level","ErrorOverlayBody","onRetry","LogBoxInspectorFooter_1","collapsed","setCollapsed","headerTitle","isComponentError","header","LogBoxInspectorMessageHeader_1","onPress","message","title","content","LogBoxInspectorCodeFrame_1","codeFrame","LogBoxInspectorStackFrames_1","bind","componentStack","styles","scrollBody","create","backgroundColor","LogBoxStyle","getBackgroundColor","withSubscription"],"sourceRoot":"","sources":["../../src/error-overlay/ErrorOverlay.tsx"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Keyboard, ScrollView, StyleSheet, View } from \"react-native\";\n\nimport * as LogBoxData from \"./Data/LogBoxData\";\nimport { LogBoxLog, StackType } from \"./Data/LogBoxLog\";\nimport { useLogs, useSelectedLog } from \"./Data/LogContext\";\nimport * as LogBoxStyle from \"./UI/LogBoxStyle\";\nimport { LogBoxInspectorCodeFrame } from \"./overlay/LogBoxInspectorCodeFrame\";\nimport { LogBoxInspectorFooter as ErrorOverlayFooter } from \"./overlay/LogBoxInspectorFooter\";\nimport { LogBoxInspectorHeader as ErrorOverlayHeader } from \"./overlay/LogBoxInspectorHeader\";\nimport { LogBoxInspectorMessageHeader } from \"./overlay/LogBoxInspectorMessageHeader\";\nimport { LogBoxInspectorStackFrames } from \"./overlay/LogBoxInspectorStackFrames\";\n\nconst HEADER_TITLE_MAP = {\n  warn: \"Console Warning\",\n  error: \"Console Error\",\n  fatal: \"Uncaught Error\",\n  syntax: \"Syntax Error\",\n  component: \"Render Error\",\n};\n\nexport function LogBoxInspectorContainer() {\n  const { selectedLogIndex, logs } = useLogs();\n  const log = logs[selectedLogIndex];\n  if (log == null) {\n    return null;\n  }\n  return (\n    <LogBoxInspector\n      log={log}\n      selectedLogIndex={selectedLogIndex}\n      logs={logs}\n    />\n  );\n}\nexport function LogBoxInspector({\n  log,\n  selectedLogIndex,\n  logs,\n}: {\n  log: LogBoxLog;\n  selectedLogIndex: number;\n  logs: LogBoxLog[];\n}) {\n  const onDismiss = useCallback((): void => {\n    // Here we handle the cases when the log is dismissed and it\n    // was either the last log, or when the current index\n    // is now outside the bounds of the log array.\n    const logsArray = Array.from(logs);\n    if (selectedLogIndex != null) {\n      if (logsArray.length - 1 <= 0) {\n        LogBoxData.setSelectedLog(-1);\n      } else if (selectedLogIndex >= logsArray.length - 1) {\n        LogBoxData.setSelectedLog(selectedLogIndex - 1);\n      }\n\n      LogBoxData.dismiss(logsArray[selectedLogIndex]);\n    }\n  }, [selectedLogIndex]);\n\n  const onMinimize = useCallback((): void => {\n    LogBoxData.setSelectedLog(-1);\n  }, []);\n\n  const onChangeSelectedIndex = useCallback((index: number): void => {\n    LogBoxData.setSelectedLog(index);\n  }, []);\n\n  useEffect(() => {\n    if (log) {\n      LogBoxData.symbolicateLogNow(\"stack\", log);\n      LogBoxData.symbolicateLogNow(\"component\", log);\n    }\n  }, [log]);\n\n  useEffect(() => {\n    // Optimistically symbolicate the last and next logs.\n    if (logs.length > 1) {\n      const selected = selectedLogIndex;\n      const lastIndex = logs.length - 1;\n      const prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;\n      const nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;\n      for (const type of [\"component\", \"stack\"] as const) {\n        LogBoxData.symbolicateLogLazy(type, logs[prevIndex]);\n        LogBoxData.symbolicateLogLazy(type, logs[nextIndex]);\n      }\n    }\n  }, [logs, selectedLogIndex]);\n\n  useEffect(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  const _handleRetry = useCallback(\n    (type: StackType) => {\n      LogBoxData.retrySymbolicateLogNow(type, log);\n    },\n    [log]\n  );\n\n  return (\n    <View style={[StyleSheet.absoluteFill, { flex: 1 }]}>\n      <ErrorOverlayHeader\n        onSelectIndex={onChangeSelectedIndex}\n        level={log.level}\n      />\n      <ErrorOverlayBody onRetry={_handleRetry} />\n      <ErrorOverlayFooter onDismiss={onDismiss} onMinimize={onMinimize} />\n    </View>\n  );\n}\n\nfunction ErrorOverlayBody({ onRetry }: { onRetry: (type: StackType) => void }) {\n  const log = useSelectedLog();\n  const [collapsed, setCollapsed] = useState(true);\n\n  useEffect(() => {\n    setCollapsed(true);\n  }, [log]);\n\n  const headerTitle =\n    HEADER_TITLE_MAP[log.isComponentError ? \"component\" : log.level] ??\n    log.type;\n\n  const header = (\n    <LogBoxInspectorMessageHeader\n      collapsed={collapsed}\n      onPress={() => setCollapsed(!collapsed)}\n      message={log.message}\n      level={log.level}\n      title={headerTitle}\n    />\n  );\n\n  const content = (\n    <>\n      <LogBoxInspectorCodeFrame codeFrame={log.codeFrame} />\n      <LogBoxInspectorStackFrames\n        type=\"stack\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onRetry={onRetry.bind(onRetry, \"stack\")}\n      />\n      {!!log?.componentStack?.length && (\n        <LogBoxInspectorStackFrames\n          type=\"component\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onRetry={onRetry.bind(onRetry, \"component\")}\n        />\n      )}\n    </>\n  );\n\n  if (collapsed) {\n    return (\n      <>\n        {header}\n        <ScrollView style={styles.scrollBody}>{content}</ScrollView>\n      </>\n    );\n  }\n  return (\n    <ScrollView style={styles.scrollBody}>\n      {header}\n      {content}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  scrollBody: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(1),\n    flex: 1,\n  },\n});\n\nexport default LogBoxData.withSubscription(LogBoxInspectorContainer);\n"]},"metadata":{},"sourceType":"script"}