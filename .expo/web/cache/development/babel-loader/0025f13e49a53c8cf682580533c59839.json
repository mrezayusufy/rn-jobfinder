{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"preserveGroups\", \"preserveDynamicRoutes\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { validatePathConfig } from \"@react-navigation/core\";\nimport * as queryString from \"query-string\";\nimport { matchDeepDynamicRouteName, matchDynamicName, matchGroupName } from \"../matchers\";\nvar DEFAULT_SCREENS = {};\nvar getActiveRoute = function getActiveRoute(state) {\n  var route = typeof state.index === \"number\" ? state.routes[state.index] : state.routes[state.routes.length - 1];\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n  if (route && isInvalidParams(route.params)) {\n    return getActiveRoute(createFakeState(route.params));\n  }\n  return route;\n};\nfunction createFakeState(params) {\n  return {\n    stale: false,\n    type: \"UNKNOWN\",\n    key: \"UNKNOWN\",\n    index: 0,\n    routeNames: [],\n    routes: [{\n      key: \"UNKNOWN\",\n      name: params.screen,\n      params: params.params,\n      path: params.path\n    }]\n  };\n}\nfunction segmentMatchesConvention(segment) {\n  return segment === \"index\" || matchDynamicName(segment) != null || matchGroupName(segment) != null || matchDeepDynamicRouteName(segment) != null;\n}\nfunction encodeURIComponentPreservingBrackets(str) {\n  return encodeURIComponent(str).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n}\n\nexport default function getPathFromState(state, _options) {\n  return getPathDataFromState(state, _options).path;\n}\nexport function getPathDataFromState(state) {\n  var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    screens: DEFAULT_SCREENS\n  };\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n  var preserveGroups = _options.preserveGroups,\n    preserveDynamicRoutes = _options.preserveDynamicRoutes,\n    options = _objectWithoutProperties(_options, _excluded);\n  validatePathConfig(options);\n\n  if (Object.is(options.screens, DEFAULT_SCREENS)) {\n    throw Error(\"You must pass a 'screens' object to 'getPathFromState' to generate a path.\");\n  }\n  return getPathFromResolvedState(state,\n  createNormalizedConfigs(options.screens), {\n    preserveGroups: preserveGroups,\n    preserveDynamicRoutes: preserveDynamicRoutes\n  });\n}\nfunction processParamsWithUserSettings(configItem, params) {\n  var stringify = configItem == null ? void 0 : configItem.stringify;\n  return Object.fromEntries(Object.entries(params).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    return [key,\n    stringify != null && stringify[key] ? stringify[key](value) :\n    Array.isArray(value) ? value : String(value)];\n  }));\n}\nexport function deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (!deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (typeof a === \"object\" && typeof b === \"object\") {\n    var keysA = Object.keys(a);\n    var keysB = Object.keys(b);\n    if (keysA.length !== keysB.length) {\n      return false;\n    }\n    for (var key of keysA) {\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\nfunction walkConfigItems(route, focusedRoute, configs, _ref3) {\n  var preserveDynamicRoutes = _ref3.preserveDynamicRoutes;\n  if (!route.state && isInvalidParams(route.params)) {\n    route.state = createFakeState(route.params);\n  }\n  var pattern = null;\n  var focusedParams;\n  var collectedParams = {};\n  while (route.name in configs) {\n    var _route$state$index;\n    var configItem = configs[route.name];\n    var inputPattern = configItem.pattern;\n    if (inputPattern == null) {\n      throw new Error(\"Unexpected: No pattern found for route \" + route.name);\n    }\n    pattern = inputPattern;\n    if (route.params) {\n      var params = processParamsWithUserSettings(configItem, route.params);\n      if (pattern) {\n        Object.assign(collectedParams, params);\n      }\n      if (deepEqual(focusedRoute, route)) {\n        if (preserveDynamicRoutes) {\n          focusedParams = params;\n        } else {\n          focusedParams = getParamsWithConventionsCollapsed({\n            params: params,\n            pattern: pattern,\n            routeName: route.name\n          });\n        }\n      }\n    }\n    if (!route.state && isInvalidParams(route.params)) {\n      route.state = createFakeState(route.params);\n    }\n\n    if (!configItem.screens || route.state === undefined) {\n      var _configItem$screens$c;\n      if (configItem.initialRouteName && configItem.screens && configItem.initialRouteName in configItem.screens && (_configItem$screens$c = configItem.screens[configItem.initialRouteName]) != null && _configItem$screens$c.pattern) {\n        var initialRouteConfig = configItem.screens[configItem.initialRouteName];\n\n        pattern = initialRouteConfig.pattern;\n        if (focusedParams) {\n          if (!preserveDynamicRoutes) {\n            focusedParams = getParamsWithConventionsCollapsed({\n              params: focusedParams,\n              pattern: pattern,\n              routeName: route.name\n            });\n          }\n        }\n      }\n      break;\n    }\n    var index = (_route$state$index = route.state.index) != null ? _route$state$index : route.state.routes.length - 1;\n    var nextRoute = route.state.routes[index];\n    var nestedScreens = configItem.screens;\n\n    if (nestedScreens && nextRoute.name in nestedScreens) {\n      route = nextRoute;\n      configs = nestedScreens;\n    } else {\n      break;\n    }\n  }\n  if (pattern == null) {\n    throw new Error(\"No pattern found for route \\\"\" + route.name + \"\\\". Options are: \" + Object.keys(configs).join(\", \") + \".\");\n  }\n  if (pattern && !focusedParams && focusedRoute.params) {\n    if (preserveDynamicRoutes) {\n      focusedParams = focusedRoute.params;\n    } else {\n      focusedParams = getParamsWithConventionsCollapsed({\n        params: focusedRoute.params,\n        pattern: pattern,\n        routeName: route.name\n      });\n    }\n    Object.assign(focusedParams, collectedParams);\n  }\n  return {\n    pattern: pattern,\n    nextRoute: route,\n    focusedParams: focusedParams,\n    params: collectedParams\n  };\n}\nfunction getPathFromResolvedState(state, configs, _ref4) {\n  var preserveGroups = _ref4.preserveGroups,\n    preserveDynamicRoutes = _ref4.preserveDynamicRoutes;\n  var path = \"\";\n  var current = state;\n  var allParams = {};\n  while (current) {\n    var _current$index, _configs$nextRoute$na, _nextRoute$state$rout, _nextRoute$state$rout2, _nextRoute$state$inde, _nextRoute$state;\n    path += \"/\";\n    var route = current.routes[(_current$index = current.index) != null ? _current$index : 0];\n    if (!route.state && isInvalidParams(route.params)) {\n      route.state = createFakeState(route.params);\n    }\n    var _walkConfigItems = walkConfigItems(route, getActiveRoute(current), _objectSpread({}, configs), {\n        preserveDynamicRoutes: preserveDynamicRoutes\n      }),\n      pattern = _walkConfigItems.pattern,\n      params = _walkConfigItems.params,\n      nextRoute = _walkConfigItems.nextRoute,\n      focusedParams = _walkConfigItems.focusedParams;\n    Object.assign(allParams, params);\n    path += getPathWithConventionsCollapsed({\n      pattern: pattern,\n      routePath: nextRoute.path,\n      params: allParams,\n      initialRouteName: (_configs$nextRoute$na = configs[nextRoute.name]) == null ? void 0 : _configs$nextRoute$na.initialRouteName,\n      preserveGroups: preserveGroups,\n      preserveDynamicRoutes: preserveDynamicRoutes\n    });\n    if (nextRoute.state &&\n    configs[(_nextRoute$state$rout = nextRoute.state.routes) == null ? void 0 : (_nextRoute$state$rout2 = _nextRoute$state$rout[(_nextRoute$state$inde = (_nextRoute$state = nextRoute.state) == null ? void 0 : _nextRoute$state.index) != null ? _nextRoute$state$inde : 0]) == null ? void 0 : _nextRoute$state$rout2.name]) {\n      current = nextRoute.state;\n    } else {\n\n      if (focusedParams) {\n        for (var param in focusedParams) {\n          if (focusedParams[param] === \"undefined\") {\n            delete focusedParams[param];\n          }\n        }\n        var query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += \"?\" + query;\n        }\n      }\n      break;\n    }\n  }\n  return {\n    path: basicSanitizePath(path),\n    params: allParams\n  };\n}\nfunction getPathWithConventionsCollapsed(_ref5) {\n  var pattern = _ref5.pattern,\n    routePath = _ref5.routePath,\n    params = _ref5.params,\n    preserveGroups = _ref5.preserveGroups,\n    preserveDynamicRoutes = _ref5.preserveDynamicRoutes,\n    initialRouteName = _ref5.initialRouteName;\n  var segments = pattern.split(\"/\");\n  return segments.map(function (p, i) {\n    var name = getParamName(p);\n\n    if (p.startsWith(\"*\")) {\n      if (preserveDynamicRoutes) {\n        return \"[...\" + name + \"]\";\n      }\n      if (params[name]) {\n        return params[name].join(\"/\");\n      }\n      if (i === 0) {\n        return routePath;\n      }\n      return routePath == null ? void 0 : routePath.split(\"/\").slice(i + 1).join(\"/\");\n    }\n\n    if (p.startsWith(\":\")) {\n      if (preserveDynamicRoutes) {\n        return \"[\" + name + \"]\";\n      }\n      return params[name];\n    }\n    if (!preserveGroups && matchGroupName(p) != null) {\n      if (segments.length - 1 === i) {\n        if (initialRouteName) {\n          if (segmentMatchesConvention(initialRouteName)) {\n            return \"\";\n          }\n          return encodeURIComponentPreservingBrackets(initialRouteName);\n        }\n      }\n      return \"\";\n    }\n    return encodeURIComponentPreservingBrackets(p);\n  }).map(function (v) {\n    return v != null ? v : \"\";\n  }).join(\"/\");\n}\n\nfunction getParamsWithConventionsCollapsed(_ref6) {\n  var pattern = _ref6.pattern,\n    routeName = _ref6.routeName,\n    params = _ref6.params;\n  var processedParams = _objectSpread({}, params);\n\n  var segments = pattern.split(\"/\");\n\n  segments.filter(function (segment) {\n    return segment.startsWith(\":\");\n  }).forEach(function (segment) {\n    var name = getParamName(segment);\n    delete processedParams[name];\n  });\n\n  if (segments.some(function (segment) {\n    return segment.startsWith(\"*\");\n  })) {\n    var _matchDeepDynamicRout;\n    var name = (_matchDeepDynamicRout = matchDeepDynamicRouteName(routeName)) != null ? _matchDeepDynamicRout : routeName;\n    delete processedParams[name];\n  }\n  return processedParams;\n}\n\nfunction basicSanitizePath(path) {\n  var simplifiedPath = path.replace(/\\/+/g, \"/\");\n  if (simplifiedPath.length <= 1) {\n    return simplifiedPath;\n  }\n  return simplifiedPath.replace(/\\/$/, \"\");\n}\nfunction isInvalidParams(params) {\n  if (!params) {\n    return false;\n  }\n  if (\"params\" in params && typeof params.params === \"object\" && !!params.params) {\n    return true;\n  }\n  return \"initial\" in params && typeof params.initial === \"boolean\" &&\n  \"screen\" in params;\n}\nvar getParamName = function getParamName(pattern) {\n  return pattern.replace(/^[:*]/, \"\").replace(/\\?$/, \"\");\n};\nvar joinPaths = function joinPaths() {\n  var _ref7;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref7 = []).concat.apply(_ref7, _toConsumableArray(paths.map(function (p) {\n    return p.split(\"/\");\n  }))).filter(Boolean).join(\"/\");\n};\nvar createConfigItem = function createConfigItem(config, parentPattern) {\n  if (typeof config === \"string\") {\n    var _pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    return {\n      pattern: _pattern\n    };\n  }\n  if (config.exact && config.path === undefined) {\n    throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n  }\n\n  var pattern = config.exact !== true ? joinPaths(parentPattern || \"\", config.path || \"\") : config.path || \"\";\n  var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n  return {\n    pattern: pattern == null ? void 0 : pattern.split(\"/\").filter(Boolean).join(\"/\"),\n    stringify: config.stringify,\n    screens: screens,\n    initialRouteName: config.initialRouteName\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(options, pattern) {\n  return Object.fromEntries(Object.entries(options).map(function (_ref8) {\n    var _ref9 = _slicedToArray(_ref8, 2),\n      name = _ref9[0],\n      c = _ref9[1];\n    return [name, createConfigItem(c, pattern)];\n  }));\n};","map":{"version":3,"names":["validatePathConfig","queryString","matchDeepDynamicRouteName","matchDynamicName","matchGroupName","DEFAULT_SCREENS","getActiveRoute","state","route","index","routes","length","isInvalidParams","params","createFakeState","stale","type","key","routeNames","name","screen","path","segmentMatchesConvention","segment","encodeURIComponentPreservingBrackets","str","encodeURIComponent","replace","getPathFromState","_options","getPathDataFromState","screens","Error","preserveGroups","preserveDynamicRoutes","options","Object","is","getPathFromResolvedState","createNormalizedConfigs","processParamsWithUserSettings","configItem","stringify","fromEntries","entries","map","value","Array","isArray","String","deepEqual","a","b","i","keysA","keys","keysB","walkConfigItems","focusedRoute","configs","pattern","focusedParams","collectedParams","inputPattern","assign","getParamsWithConventionsCollapsed","routeName","undefined","initialRouteName","initialRouteConfig","nextRoute","nestedScreens","join","current","allParams","getPathWithConventionsCollapsed","routePath","param","query","sort","basicSanitizePath","segments","split","p","getParamName","startsWith","slice","v","processedParams","filter","forEach","some","simplifiedPath","initial","joinPaths","paths","concat","Boolean","createConfigItem","config","parentPattern","exact","c"],"sources":["C:/react-project/rn-jobs/node_modules/expo-router/src/fork/getPathFromState.ts"],"sourcesContent":["import {\n  PathConfig,\n  PathConfigMap,\n  validatePathConfig,\n} from \"@react-navigation/core\";\nimport type {\n  NavigationState,\n  PartialState,\n  Route,\n} from \"@react-navigation/routers\";\nimport * as queryString from \"query-string\";\n\nimport {\n  matchDeepDynamicRouteName,\n  matchDynamicName,\n  matchGroupName,\n} from \"../matchers\";\n\ntype Options<ParamList extends object> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\nexport type State =\n  | NavigationState\n  | Omit<PartialState<NavigationState>, \"stale\">;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n  // Used as fallback for groups\n  initialRouteName?: string;\n};\n\ntype CustomRoute = Route<string> & {\n  state?: State;\n};\n\nconst DEFAULT_SCREENS: PathConfigMap<object> = {};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === \"number\"\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  if (route && isInvalidParams(route.params)) {\n    return getActiveRoute(createFakeState(route.params));\n  }\n\n  return route;\n};\n\nfunction createFakeState(params: StateAsParams) {\n  return {\n    stale: false,\n    type: \"UNKNOWN\",\n    key: \"UNKNOWN\",\n    index: 0,\n    routeNames: [],\n    routes: [\n      {\n        key: \"UNKNOWN\",\n        name: params.screen,\n        params: params.params,\n        path: params.path,\n      },\n    ],\n  };\n}\n\nfunction segmentMatchesConvention(segment: string): boolean {\n  return (\n    segment === \"index\" ||\n    matchDynamicName(segment) != null ||\n    matchGroupName(segment) != null ||\n    matchDeepDynamicRouteName(segment) != null\n  );\n}\n\nfunction encodeURIComponentPreservingBrackets(str: string) {\n  return encodeURIComponent(str).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n}\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState<ParamList extends object>(\n  state: State,\n  _options?: Options<ParamList> & {\n    preserveGroups?: boolean;\n    preserveDynamicRoutes?: boolean;\n  }\n): string {\n  return getPathDataFromState(state, _options).path;\n}\n\nexport function getPathDataFromState<ParamList extends object>(\n  state: State,\n  _options: Options<ParamList> & {\n    preserveGroups?: boolean;\n    preserveDynamicRoutes?: boolean;\n  } = { screens: DEFAULT_SCREENS }\n) {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  const { preserveGroups, preserveDynamicRoutes, ...options } = _options;\n\n  validatePathConfig(options);\n\n  // Expo Router disallows usage without a linking config.\n  if (Object.is(options.screens, DEFAULT_SCREENS)) {\n    throw Error(\n      \"You must pass a 'screens' object to 'getPathFromState' to generate a path.\"\n    );\n  }\n\n  return getPathFromResolvedState(\n    state,\n    // Create a normalized configs object which will be easier to use\n    createNormalizedConfigs(options.screens),\n    { preserveGroups, preserveDynamicRoutes }\n  );\n}\n\nfunction processParamsWithUserSettings(\n  configItem: ConfigItem,\n  params: Record<string, any>\n) {\n  const stringify = configItem?.stringify;\n\n  return Object.fromEntries(\n    Object.entries(params).map(([key, value]) => [\n      key,\n      // TODO: Strip nullish values here.\n      stringify?.[key]\n        ? stringify[key](value)\n        : // Preserve rest params\n        Array.isArray(value)\n        ? value\n        : String(value),\n    ])\n  );\n}\n\nexport function deepEqual(a: any, b: any) {\n  if (a === b) {\n    return true;\n  }\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (let i = 0; i < a.length; i++) {\n      if (!deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof a === \"object\" && typeof b === \"object\") {\n    const keysA = Object.keys(a);\n    const keysB = Object.keys(b);\n\n    if (keysA.length !== keysB.length) {\n      return false;\n    }\n\n    for (const key of keysA) {\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction walkConfigItems(\n  route: CustomRoute,\n  focusedRoute: {\n    name: string;\n    params?: object;\n  },\n  configs: Record<string, ConfigItem>,\n  {\n    preserveDynamicRoutes,\n  }: {\n    preserveDynamicRoutes?: boolean;\n  }\n) {\n  // NOTE(EvanBacon): Fill in current route using state that was passed as params.\n  if (!route.state && isInvalidParams(route.params)) {\n    route.state = createFakeState(route.params);\n  }\n\n  let pattern: string | null = null;\n  let focusedParams: Record<string, any> | undefined;\n\n  const collectedParams: Record<string, any> = {};\n\n  while (route.name in configs) {\n    const configItem = configs[route.name];\n    const inputPattern = configItem.pattern;\n\n    if (inputPattern == null) {\n      // This should never happen in Expo Router.\n      throw new Error(\"Unexpected: No pattern found for route \" + route.name);\n    }\n    pattern = inputPattern;\n\n    if (route.params) {\n      const params = processParamsWithUserSettings(configItem, route.params);\n      // TODO: Does this need to be a null check?\n      if (pattern) {\n        Object.assign(collectedParams, params);\n      }\n      if (deepEqual(focusedRoute, route)) {\n        if (preserveDynamicRoutes) {\n          focusedParams = params;\n        } else {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = getParamsWithConventionsCollapsed({\n            params,\n            pattern,\n            routeName: route.name,\n          });\n        }\n      }\n    }\n\n    if (!route.state && isInvalidParams(route.params)) {\n      route.state = createFakeState(route.params);\n    }\n\n    // If there is no `screens` property or no nested state, we return pattern\n    if (!configItem.screens || route.state === undefined) {\n      if (\n        configItem.initialRouteName &&\n        configItem.screens &&\n        configItem.initialRouteName in configItem.screens &&\n        configItem.screens[configItem.initialRouteName]?.pattern\n      ) {\n        const initialRouteConfig =\n          configItem.screens[configItem.initialRouteName];\n\n        // NOTE(EvanBacon): Big hack to support initial route changes in tab bars.\n        pattern = initialRouteConfig.pattern!;\n        if (focusedParams) {\n          if (!preserveDynamicRoutes) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = getParamsWithConventionsCollapsed({\n              params: focusedParams,\n              pattern,\n              routeName: route.name,\n            });\n          }\n        }\n      }\n      break;\n    }\n\n    const index = route.state.index ?? route.state.routes.length - 1;\n\n    const nextRoute = route.state.routes[index];\n    const nestedScreens = configItem.screens;\n\n    // if there is config for next route name, we go deeper\n    if (nestedScreens && nextRoute.name in nestedScreens) {\n      route = nextRoute as CustomRoute;\n      configs = nestedScreens;\n    } else {\n      // If not, there is no sense in going deeper in config\n      break;\n    }\n  }\n\n  if (pattern == null) {\n    throw new Error(\n      `No pattern found for route \"${route.name}\". Options are: ${Object.keys(\n        configs\n      ).join(\", \")}.`\n    );\n  }\n\n  if (pattern && !focusedParams && focusedRoute.params) {\n    if (preserveDynamicRoutes) {\n      focusedParams = focusedRoute.params;\n    } else {\n      // If this is the focused route, keep the params for later use\n      // We save it here since it's been stringified already\n      focusedParams = getParamsWithConventionsCollapsed({\n        params: focusedRoute.params,\n        pattern,\n        routeName: route.name,\n      });\n    }\n    Object.assign(focusedParams, collectedParams);\n  }\n\n  return {\n    pattern,\n    nextRoute: route,\n    focusedParams,\n    params: collectedParams,\n  };\n}\n\nfunction getPathFromResolvedState(\n  state: State,\n  configs: Record<string, ConfigItem>,\n  {\n    preserveGroups,\n    preserveDynamicRoutes,\n  }: { preserveGroups?: boolean; preserveDynamicRoutes?: boolean }\n) {\n  let path = \"\";\n  let current: State = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    path += \"/\";\n\n    const route = current.routes[current.index ?? 0] as CustomRoute;\n    // NOTE(EvanBacon): Fill in current route using state that was passed as params.\n    // if (isInvalidParams(route.params)) {\n    if (!route.state && isInvalidParams(route.params)) {\n      route.state = createFakeState(route.params);\n    }\n\n    const { pattern, params, nextRoute, focusedParams } = walkConfigItems(\n      route,\n      getActiveRoute(current),\n      { ...configs },\n      { preserveDynamicRoutes }\n    );\n\n    Object.assign(allParams, params);\n\n    path += getPathWithConventionsCollapsed({\n      pattern,\n      routePath: nextRoute.path,\n      params: allParams,\n      initialRouteName: configs[nextRoute.name]?.initialRouteName,\n      preserveGroups,\n      preserveDynamicRoutes,\n    });\n\n    if (\n      nextRoute.state &&\n      // NOTE(EvanBacon): The upstream implementation allows for sending in synthetic states (states that weren't generated by `getStateFromPath`)\n      // and any invalid routes will simply be ignored.\n      // Because of this, we need to check if the next route is valid before continuing, otherwise our more strict\n      // implementation will throw an error.\n      configs[nextRoute.state.routes?.[nextRoute.state?.index ?? 0]?.name]\n    ) {\n      // Continue looping with the next state if available.\n      current = nextRoute.state;\n    } else {\n      // Finished crawling state.\n\n      // Check for query params before exiting.\n      if (focusedParams) {\n        for (const param in focusedParams) {\n          // TODO: This is not good. We shouldn't squat strings named \"undefined\".\n          if (focusedParams[param] === \"undefined\") {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n\n        const query = queryString.stringify(focusedParams, { sort: false });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      break;\n    }\n  }\n\n  return { path: basicSanitizePath(path), params: allParams };\n}\n\nfunction getPathWithConventionsCollapsed({\n  pattern,\n  routePath,\n  params,\n  preserveGroups,\n  preserveDynamicRoutes,\n  initialRouteName,\n}: {\n  pattern: string;\n  routePath?: string;\n  params: Record<string, any>;\n  preserveGroups?: boolean;\n  preserveDynamicRoutes?: boolean;\n  initialRouteName?: string;\n}) {\n  const segments = pattern.split(\"/\");\n  return segments\n    .map((p, i) => {\n      const name = getParamName(p);\n\n      // We don't know what to show for wildcard patterns\n      // Showing the route name seems ok, though whatever we show here will be incorrect\n      // Since the page doesn't actually exist\n      if (p.startsWith(\"*\")) {\n        if (preserveDynamicRoutes) {\n          return `[...${name}]`;\n        }\n        if (params[name]) {\n          return params[name].join(\"/\");\n        }\n        if (i === 0) {\n          // This can occur when a wildcard matches all routes and the given path was `/`.\n          return routePath;\n        }\n        // remove existing segments from route.path and return it\n        // this is used for nested wildcard routes. Without this, the path would add\n        // all nested segments to the beginning of the wildcard route.\n        return routePath\n          ?.split(\"/\")\n          .slice(i + 1)\n          .join(\"/\");\n      }\n\n      // If the path has a pattern for a param, put the param in the path\n      if (p.startsWith(\":\")) {\n        if (preserveDynamicRoutes) {\n          return `[${name}]`;\n        }\n        // Optional params without value assigned in route.params should be ignored\n        return params[name];\n      }\n\n      if (!preserveGroups && matchGroupName(p) != null) {\n        // When the last part is a group it could be a shared URL\n        // if the route has an initialRouteName defined, then we should\n        // use that as the component path as we can assume it will be shown.\n        if (segments.length - 1 === i) {\n          if (initialRouteName) {\n            // Return an empty string if the init route is ambiguous.\n            if (segmentMatchesConvention(initialRouteName)) {\n              return \"\";\n            }\n            return encodeURIComponentPreservingBrackets(initialRouteName);\n          }\n        }\n        return \"\";\n      }\n      // Preserve dynamic syntax for rehydration\n      return encodeURIComponentPreservingBrackets(p);\n    })\n    .map((v) => v ?? \"\")\n    .join(\"/\");\n}\n\n/** Given a set of query params and a pattern with possible conventions, collapse the conventions and return the remaining params. */\nfunction getParamsWithConventionsCollapsed({\n  pattern,\n  routeName,\n  params,\n}: {\n  pattern: string;\n  /** Route name is required for matching the wildcard route. This is specific to Expo Router. */\n  routeName: string;\n  params: object;\n}): Record<string, string> {\n  const processedParams: Record<string, string> = { ...params };\n\n  // Remove the params present in the pattern since we'll only use the rest for query string\n\n  const segments = pattern.split(\"/\");\n\n  // Dynamic Routes\n  segments\n    .filter((segment) => segment.startsWith(\":\"))\n    .forEach((segment) => {\n      const name = getParamName(segment);\n      delete processedParams[name];\n    });\n\n  // Deep Dynamic Routes\n  if (segments.some((segment) => segment.startsWith(\"*\"))) {\n    // NOTE(EvanBacon): Drop the param name matching the wildcard route name -- this is specific to Expo Router.\n    const name = matchDeepDynamicRouteName(routeName) ?? routeName;\n    delete processedParams[name];\n  }\n\n  return processedParams;\n}\n\n// Remove multiple as well as trailing slashes\nfunction basicSanitizePath(path: string) {\n  // Remove duplicate slashes like `foo//bar` -> `foo/bar`\n  const simplifiedPath = path.replace(/\\/+/g, \"/\");\n  if (simplifiedPath.length <= 1) {\n    return simplifiedPath;\n  }\n  // Remove trailing slash like `foo/bar/` -> `foo/bar`\n  return simplifiedPath.replace(/\\/$/, \"\");\n}\n\ntype StateAsParams = {\n  initial: boolean;\n  path?: string;\n  screen: string;\n  params: Record<string, any>;\n};\n\n// TODO: Make StackRouter not do this...\n// Detect if the params came from StackRouter using `params` to pass around internal state.\nfunction isInvalidParams(\n  params?: Record<string, any>\n): params is StateAsParams {\n  if (!params) {\n    return false;\n  }\n\n  if (\n    \"params\" in params &&\n    typeof params.params === \"object\" &&\n    !!params.params\n  ) {\n    return true;\n  }\n\n  return (\n    \"initial\" in params &&\n    typeof params.initial === \"boolean\" &&\n    // \"path\" in params &&\n    \"screen\" in params\n  );\n}\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^[:*]/, \"\").replace(/\\?$/, \"\");\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split(\"/\")))\n    .filter(Boolean)\n    .join(\"/\");\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === \"string\") {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  const pattern =\n    config.exact !== true\n      ? joinPaths(parentPattern || \"\", config.path || \"\")\n      : config.path || \"\";\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split(\"/\").filter(Boolean).join(\"/\"),\n    stringify: config.stringify,\n    screens,\n    initialRouteName: config.initialRouteName,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  Object.fromEntries(\n    Object.entries(options).map(([name, c]) => [\n      name,\n      createConfigItem(c, pattern),\n    ])\n  );\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}