{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogBoxInspectorStackFrame = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar LogBoxButton_1 = require(\"../UI/LogBoxButton\");\nvar LogBoxStyle = __importStar(require(\"../UI/LogBoxStyle\"));\nvar constants_1 = require(\"../UI/constants\");\nvar formatProjectFilePath_1 = require(\"../formatProjectFilePath\");\nfunction LogBoxInspectorStackFrame(props) {\n  var frame = props.frame,\n    onPress = props.onPress;\n  var column = frame.column != null && parseInt(String(frame.column), 10);\n  var location = (0, formatProjectFilePath_1.formatProjectFileName)(frame.file) + (frame.lineNumber != null ? \":\" + frame.lineNumber + (column && !isNaN(column) ? \":\" + (column + 1) : \"\") : \"\");\n  return react_1.default.createElement(react_native_1.View, {\n    style: styles.frameContainer\n  }, react_1.default.createElement(LogBoxButton_1.LogBoxButton, {\n    backgroundColor: {\n      default: \"transparent\",\n      pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : \"transparent\"\n    },\n    onPress: onPress,\n    style: styles.frame\n  }, react_1.default.createElement(react_native_1.Text, {\n    style: [styles.name, frame.collapse === true && styles.dim]\n  }, frame.methodName), react_1.default.createElement(react_native_1.Text, {\n    ellipsizeMode: \"middle\",\n    numberOfLines: 1,\n    style: [styles.location, frame.collapse === true && styles.dim]\n  }, location)));\n}\nexports.LogBoxInspectorStackFrame = LogBoxInspectorStackFrame;\nvar styles = react_native_1.StyleSheet.create({\n  frameContainer: {\n    flexDirection: \"row\",\n    paddingHorizontal: 15\n  },\n  frame: {\n    flex: 1,\n    paddingVertical: 4,\n    paddingHorizontal: 10,\n    borderRadius: 5\n  },\n  lineLocation: {\n    flexDirection: \"row\"\n  },\n  name: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: \"400\",\n    fontFamily: constants_1.CODE_FONT\n  },\n  location: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: \"300\",\n    includeFontPadding: false,\n    lineHeight: 16,\n    paddingLeft: 10\n  },\n  dim: {\n    color: LogBoxStyle.getTextColor(0.4),\n    fontWeight: \"300\"\n  },\n  line: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: \"300\",\n    includeFontPadding: false,\n    lineHeight: 16\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAA0B;AAI1B;AACA;AACA;AACA;AAOA,SAAgBA,yBAAyB,CAACC,KAAY;EACpD,IAAQC,KAAK,GAAcD,KAAK,CAAxBC,KAAK;IAAEC,OAAO,GAAKF,KAAK,CAAjBE,OAAO;EACtB,IAAMC,MAAM,GAAGF,KAAK,CAACE,MAAM,IAAI,IAAI,IAAIC,QAAQ,CAACC,MAAM,CAACJ,KAAK,CAACE,MAAM,CAAC,EAAE,EAAE,CAAC;EACzE,IAAMG,QAAQ,GACZ,iDAAqB,EAACL,KAAK,CAACM,IAAI,CAAC,IAChCN,KAAK,CAACO,UAAU,IAAI,IAAI,GACrB,GAAG,GACHP,KAAK,CAACO,UAAU,IACfL,MAAM,IAAI,CAACM,KAAK,CAACN,MAAM,CAAC,GAAG,GAAG,IAAIA,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GACpD,EAAE,CAAC;EACT,OACEO,8BAACC,mBAAI;IAACC,KAAK,EAAEC,MAAM,CAACC;EAAc,GAChCJ,8BAACK,2BAAY;IACXC,eAAe,EAAE;MACfC,OAAO,EAAE,aAAa;MACtBC,OAAO,EAAEhB,OAAO,GAAGiB,WAAW,CAACC,kBAAkB,CAAC,CAAC,CAAC,GAAG;KACxD;IACDlB,OAAO,EAAEA,OAAO;IAChBU,KAAK,EAAEC,MAAM,CAACZ;EAAK,GAEnBS,8BAACC,mBAAI;IAACC,KAAK,EAAE,CAACC,MAAM,CAACQ,IAAI,EAAEpB,KAAK,CAACqB,QAAQ,KAAK,IAAI,IAAIT,MAAM,CAACU,GAAG;EAAC,GAC9DtB,KAAK,CAACuB,UAAU,CACZ,EACPd,8BAACC,mBAAI;IACHc,aAAa,EAAC,QAAQ;IACtBC,aAAa,EAAE,CAAC;IAChBd,KAAK,EAAE,CAACC,MAAM,CAACP,QAAQ,EAAEL,KAAK,CAACqB,QAAQ,KAAK,IAAI,IAAIT,MAAM,CAACU,GAAG;EAAC,GAE9DjB,QAAQ,CACJ,CACM,CACV;AAEX;AAjCAqB;AAmCA,IAAMd,MAAM,GAAGF,yBAAU,CAACiB,MAAM,CAAC;EAC/Bd,cAAc,EAAE;IACde,aAAa,EAAE,KAAK;IACpBC,iBAAiB,EAAE;GACpB;EACD7B,KAAK,EAAE;IACL8B,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,CAAC;IAClBF,iBAAiB,EAAE,EAAE;IACrBG,YAAY,EAAE;GACf;EACDC,YAAY,EAAE;IACZL,aAAa,EAAE;GAChB;EACDR,IAAI,EAAE;IACJc,KAAK,EAAEhB,WAAW,CAACiB,YAAY,CAAC,CAAC,CAAC;IAClCC,QAAQ,EAAE,EAAE;IACZC,kBAAkB,EAAE,KAAK;IACzBC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE,KAAK;IACjBC,UAAU,EAAEC;GACb;EACDpC,QAAQ,EAAE;IACR6B,KAAK,EAAEhB,WAAW,CAACiB,YAAY,CAAC,GAAG,CAAC;IACpCC,QAAQ,EAAE,EAAE;IACZG,UAAU,EAAE,KAAK;IACjBF,kBAAkB,EAAE,KAAK;IACzBC,UAAU,EAAE,EAAE;IACdI,WAAW,EAAE;GACd;EACDpB,GAAG,EAAE;IACHY,KAAK,EAAEhB,WAAW,CAACiB,YAAY,CAAC,GAAG,CAAC;IACpCI,UAAU,EAAE;GACb;EACDI,IAAI,EAAE;IACJT,KAAK,EAAEhB,WAAW,CAACiB,YAAY,CAAC,GAAG,CAAC;IACpCC,QAAQ,EAAE,EAAE;IACZG,UAAU,EAAE,KAAK;IACjBF,kBAAkB,EAAE,KAAK;IACzBC,UAAU,EAAE;;CAEf,CAAC","names":["LogBoxInspectorStackFrame","props","frame","onPress","column","parseInt","String","location","file","lineNumber","isNaN","react_1","react_native_1","style","styles","frameContainer","LogBoxButton_1","backgroundColor","default","pressed","LogBoxStyle","getBackgroundColor","name","collapse","dim","methodName","ellipsizeMode","numberOfLines","exports","create","flexDirection","paddingHorizontal","flex","paddingVertical","borderRadius","lineLocation","color","getTextColor","fontSize","includeFontPadding","lineHeight","fontWeight","fontFamily","constants_1","paddingLeft","line"],"sourceRoot":"","sources":["../../../src/error-overlay/overlay/LogBoxInspectorStackFrame.tsx"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from \"react\";\nimport { GestureResponderEvent, StyleSheet, Text, View } from \"react-native\";\nimport { StackFrame } from \"stacktrace-parser\";\n\nimport { LogBoxButton } from \"../UI/LogBoxButton\";\nimport * as LogBoxStyle from \"../UI/LogBoxStyle\";\nimport { CODE_FONT } from \"../UI/constants\";\nimport { formatProjectFileName } from \"../formatProjectFilePath\";\n\ntype Props = {\n  frame: StackFrame & { collapse?: boolean };\n  onPress?: (event: GestureResponderEvent) => void;\n};\n\nexport function LogBoxInspectorStackFrame(props: Props) {\n  const { frame, onPress } = props;\n  const column = frame.column != null && parseInt(String(frame.column), 10);\n  const location =\n    formatProjectFileName(frame.file) +\n    (frame.lineNumber != null\n      ? \":\" +\n        frame.lineNumber +\n        (column && !isNaN(column) ? \":\" + (column + 1) : \"\")\n      : \"\");\n  return (\n    <View style={styles.frameContainer}>\n      <LogBoxButton\n        backgroundColor={{\n          default: \"transparent\",\n          pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : \"transparent\",\n        }}\n        onPress={onPress}\n        style={styles.frame}\n      >\n        <Text style={[styles.name, frame.collapse === true && styles.dim]}>\n          {frame.methodName}\n        </Text>\n        <Text\n          ellipsizeMode=\"middle\"\n          numberOfLines={1}\n          style={[styles.location, frame.collapse === true && styles.dim]}\n        >\n          {location}\n        </Text>\n      </LogBoxButton>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  frameContainer: {\n    flexDirection: \"row\",\n    paddingHorizontal: 15,\n  },\n  frame: {\n    flex: 1,\n    paddingVertical: 4,\n    paddingHorizontal: 10,\n    borderRadius: 5,\n  },\n  lineLocation: {\n    flexDirection: \"row\",\n  },\n  name: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: \"400\",\n    fontFamily: CODE_FONT,\n  },\n  location: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: \"300\",\n    includeFontPadding: false,\n    lineHeight: 16,\n    paddingLeft: 10,\n  },\n  dim: {\n    color: LogBoxStyle.getTextColor(0.4),\n    fontWeight: \"300\",\n  },\n  line: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: \"300\",\n    includeFontPadding: false,\n    lineHeight: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}