{"ast":null,"code":"\nfunction findTopStateForTarget(state) {\n  var current = state;\n  while (((_current = current) == null ? void 0 : (_current$routes = _current.routes) == null ? void 0 : _current$routes[((_current2 = current) == null ? void 0 : (_current2$routes = _current2.routes) == null ? void 0 : _current2$routes.length) - 1].state) != null) {\n    var _current, _current$routes, _current2, _current2$routes, _current3, _current4;\n    current = (_current3 = current) == null ? void 0 : _current3.routes[((_current4 = current) == null ? void 0 : _current4.routes.length) - 1].state;\n  }\n  return current;\n}\n\nexport function findTopRouteForTarget(state) {\n  var _nextState$routes;\n  var nextState = findTopStateForTarget(state);\n  return (_nextState$routes = nextState.routes) == null ? void 0 : _nextState$routes[nextState.routes.length - 1];\n}\n\nexport function isMovingToSiblingRoute(rootState, targetState) {\n  var current = targetState;\n  var currentRoot = rootState;\n  var _loop = function _loop() {\n    var _current7, _current7$routes, _current8, _current8$routes, _nextRoute$state, _currentRoot$index, _currentRoot, _currentRoot2, _currentRoot2$routes, _currentRoot2$routes$;\n    var nextRoute = (_current7 = current) == null ? void 0 : (_current7$routes = _current7.routes) == null ? void 0 : _current7$routes[((_current8 = current) == null ? void 0 : (_current8$routes = _current8.routes) == null ? void 0 : _current8$routes.length) - 1];\n    if (\n    (_nextRoute$state = nextRoute.state) != null && _nextRoute$state.routes.length &&\n    !currentRoot) {\n      return {\n        v: false\n      };\n    }\n    var absCurrent = currentRoot.routes[(_currentRoot$index = (_currentRoot = currentRoot) == null ? void 0 : _currentRoot.index) != null ? _currentRoot$index : 0];\n    if (absCurrent.name !== nextRoute.name) {\n      return {\n        v: false\n      };\n    }\n    currentRoot = (_currentRoot2 = currentRoot) == null ? void 0 : (_currentRoot2$routes = _currentRoot2.routes) == null ? void 0 : (_currentRoot2$routes$ = _currentRoot2$routes.find(function (route) {\n      return route.name === nextRoute.name;\n    })) == null ? void 0 : _currentRoot2$routes$.state;\n    current = nextRoute.state;\n  };\n  while (((_current5 = current) == null ? void 0 : (_current5$routes = _current5.routes) == null ? void 0 : _current5$routes[((_current6 = current) == null ? void 0 : (_current6$routes = _current6.routes) == null ? void 0 : _current6$routes.length) - 1].state) != null) {\n    var _current5, _current5$routes, _current6, _current6$routes;\n    var _ret = _loop();\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n  return true;\n}\n\nexport function getQualifiedStateForTopOfTargetState(rootState, targetState) {\n  var current = targetState;\n  var currentRoot = rootState;\n  var _loop2 = function _loop2() {\n    var _current11, _current11$routes, _current12, _current12$routes, _currentRoot3, _currentRoot3$routes, _currentRoot3$routes$;\n    var nextRoute = (_current11 = current) == null ? void 0 : (_current11$routes = _current11.routes) == null ? void 0 : _current11$routes[((_current12 = current) == null ? void 0 : (_current12$routes = _current12.routes) == null ? void 0 : _current12$routes.length) - 1];\n    var nextCurrentRoot = (_currentRoot3 = currentRoot) == null ? void 0 : (_currentRoot3$routes = _currentRoot3.routes) == null ? void 0 : (_currentRoot3$routes$ = _currentRoot3$routes.find(function (route) {\n      return route.name === nextRoute.name;\n    })) == null ? void 0 : _currentRoot3$routes$.state;\n    if (nextCurrentRoot == null) {\n      return {\n        v: currentRoot\n      };\n    } else {\n      currentRoot = nextCurrentRoot;\n    }\n    current = nextRoute.state;\n  };\n  while (((_current9 = current) == null ? void 0 : (_current9$routes = _current9.routes) == null ? void 0 : _current9$routes[((_current10 = current) == null ? void 0 : (_current10$routes = _current10.routes) == null ? void 0 : _current10$routes.length) - 1].state) != null) {\n    var _current9, _current9$routes, _current10, _current10$routes;\n    var _ret2 = _loop2();\n    if (typeof _ret2 === \"object\") return _ret2.v;\n  }\n  return currentRoot;\n}\n\nexport function getEarliestMismatchedRoute(rootState, actionParams) {\n  var _actionParams$name;\n  var actionName = (_actionParams$name = actionParams.name) != null ? _actionParams$name : actionParams.screen;\n  if (!(rootState != null && rootState.routes) || rootState.index == null) {\n    return {\n      name: actionName,\n      type: \"stack\"\n    };\n  }\n  var nextCurrentRoot = rootState.routes[rootState.index];\n  if (actionName === nextCurrentRoot.name) {\n    if (!actionParams.params) {\n      return null;\n    }\n    return getEarliestMismatchedRoute(\n    nextCurrentRoot.state, actionParams.params);\n  }\n\n  return {\n    name: actionName,\n    params: actionParams.params,\n    type: rootState.type\n  };\n}","map":{"version":3,"names":["findTopStateForTarget","state","current","routes","length","findTopRouteForTarget","nextState","isMovingToSiblingRoute","rootState","targetState","currentRoot","nextRoute","absCurrent","index","name","find","route","getQualifiedStateForTopOfTargetState","nextCurrentRoot","getEarliestMismatchedRoute","actionParams","actionName","screen","type","params"],"sources":["C:/react-project/rn-jobs/node_modules/expo-router/src/link/stateOperations.ts"],"sourcesContent":["import {\n  InitialState,\n  NavigationState,\n  ParamListBase,\n  getActionFromState,\n} from \"@react-navigation/native\";\n\nimport { ResultState } from \"../fork/getStateFromPath\";\n\nexport type NavigateAction = Extract<\n  ReturnType<typeof getActionFromState>,\n  { type: \"NAVIGATE\" }\n> & {\n  payload: NavigateActionParams;\n};\n\nexport type NavigateActionParams = {\n  params?: NavigateActionParams;\n  path: string;\n  initial: boolean;\n  screen: string;\n  name?: string;\n};\n\n// Get the last state for a given target state (generated from a path).\nfunction findTopStateForTarget(state: ResultState) {\n  let current: Partial<InitialState> | undefined = state;\n\n  while (current?.routes?.[current?.routes?.length - 1].state != null) {\n    current = current?.routes[current?.routes.length - 1].state;\n  }\n\n  return current;\n}\n\n/** Return the absolute last route to move to. */\nexport function findTopRouteForTarget(state: ResultState) {\n  const nextState = findTopStateForTarget(state)!;\n  // Ensure we get the last route to prevent returning the initial route.\n  return nextState.routes?.[nextState.routes.length - 1]!;\n}\n\n/** @returns true if moving to a sibling inside the same navigator. */\nexport function isMovingToSiblingRoute(\n  rootState: InitialState,\n  targetState: ResultState\n): boolean {\n  let current: InitialState | undefined = targetState;\n  let currentRoot: InitialState | undefined = rootState;\n\n  while (current?.routes?.[current?.routes?.length - 1].state != null) {\n    const nextRoute: any = current?.routes?.[current?.routes?.length - 1];\n\n    if (\n      // Has more\n      nextRoute.state?.routes.length &&\n      // No match\n      !currentRoot\n    ) {\n      return false;\n    }\n\n    const absCurrent = currentRoot!.routes[currentRoot?.index ?? 0];\n\n    if (absCurrent.name !== nextRoute.name) {\n      return false;\n    }\n\n    currentRoot = currentRoot?.routes?.find(\n      (route) => route.name === nextRoute.name\n    )?.state;\n\n    current = nextRoute.state;\n  }\n\n  return true;\n}\n\n// Given the root state and a target state from `getStateFromPath`,\n// return the root state containing the highest target route matching the root state.\n// This can be used to determine what type of navigator action should be used.\nexport function getQualifiedStateForTopOfTargetState(\n  rootState: InitialState,\n  targetState: ResultState\n) {\n  let current: InitialState | undefined = targetState;\n  let currentRoot: InitialState | undefined = rootState;\n\n  while (current?.routes?.[current?.routes?.length - 1].state != null) {\n    const nextRoute: any = current?.routes?.[current?.routes?.length - 1];\n\n    const nextCurrentRoot: InitialState | undefined = currentRoot?.routes?.find(\n      (route) => route.name === nextRoute.name\n    )?.state;\n\n    if (nextCurrentRoot == null) {\n      return currentRoot;\n      // Not sure what to do -- we're tracking against the assumption that\n      // all routes in the target state are in the root state\n      // currentRoot = undefined;\n    } else {\n      currentRoot = nextCurrentRoot;\n    }\n\n    current = nextRoute.state;\n  }\n\n  return currentRoot;\n}\n\n// Given the root state and a target state from `getStateFromPath`,\n// return the root state containing the highest target route matching the root state.\n// This can be used to determine what type of navigator action should be used.\nexport function getEarliestMismatchedRoute<T extends ParamListBase>(\n  rootState: NavigationState<T> | undefined,\n  actionParams: NavigateActionParams\n): { name: string; params?: any; type?: string } | null {\n  const actionName = actionParams.name ?? actionParams.screen;\n  if (!rootState?.routes || rootState.index == null) {\n    // This should never happen where there's more action than state.\n    return {\n      name: actionName,\n      type: \"stack\",\n    };\n  }\n\n  const nextCurrentRoot = rootState.routes[rootState.index];\n  if (actionName === nextCurrentRoot.name) {\n    if (!actionParams.params) {\n      // All routes match all the way up, no change required.\n      return null;\n    }\n\n    return getEarliestMismatchedRoute(\n      // @react-navigation/native types this as NavigationState | Partial<NavigationState> | undefined\n      // In our usage, it's always a NavigationState | undefined\n      nextCurrentRoot.state as NavigationState<T> | undefined,\n      actionParams.params\n    );\n  }\n\n  // There's a selected state but it doesn't match the action state\n  // this is now the lowest point of change.\n  return {\n    name: actionName,\n    params: actionParams.params,\n    type: rootState.type,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}