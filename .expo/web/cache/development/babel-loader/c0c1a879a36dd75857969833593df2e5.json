{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { createNavigationContainerRef } from \"@react-navigation/native\";\nimport React from \"react\";\nimport UpstreamNavigationContainer from \"./fork/NavigationContainer\";\nimport { getLinkingConfig } from \"./getLinkingConfig\";\nimport { RootNavigationRef } from \"./useRootNavigation\";\nimport { useRootRouteNodeContext } from \"./useRootRouteNodeContext\";\nimport { SplashScreen } from \"./views/Splash\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar navigationRef = createNavigationContainerRef();\n\nexport function getNavigationContainerRef() {\n  return navigationRef;\n}\n\nexport function NavigationContainer(props) {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isReady = _React$useState2[0],\n    setReady = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    isSplashReady = _React$useState4[0],\n    setSplashReady = _React$useState4[1];\n  var ref = React.useMemo(function () {\n    return isReady ? navigationRef : null;\n  }, [isReady]);\n  var root = useRootRouteNodeContext();\n  var linking = React.useMemo(function () {\n    return getLinkingConfig(root);\n  }, [root]);\n  return _jsxs(RootNavigationRef.Provider, {\n    value: {\n      ref: ref\n    },\n    children: [!isSplashReady && _jsx(SplashScreen, {}), _jsx(UpstreamNavigationContainer, _objectSpread(_objectSpread({}, props), {}, {\n      linking: linking,\n      ref: navigationRef,\n      onReady: function onReady() {\n        setReady(true);\n        requestAnimationFrame(function () {\n          setSplashReady(true);\n        });\n      }\n    }))]\n  });\n}","map":{"version":3,"names":["createNavigationContainerRef","React","UpstreamNavigationContainer","getLinkingConfig","RootNavigationRef","useRootRouteNodeContext","SplashScreen","navigationRef","getNavigationContainerRef","NavigationContainer","props","useState","isReady","setReady","isSplashReady","setSplashReady","ref","useMemo","root","linking","requestAnimationFrame"],"sources":["C:/react-project/rn-jobs/node_modules/expo-router/src/NavigationContainer.tsx"],"sourcesContent":["import { createNavigationContainerRef } from \"@react-navigation/native\";\nimport React from \"react\";\n\nimport UpstreamNavigationContainer from \"./fork/NavigationContainer\";\nimport { getLinkingConfig } from \"./getLinkingConfig\";\nimport { RootNavigationRef } from \"./useRootNavigation\";\nimport { useRootRouteNodeContext } from \"./useRootRouteNodeContext\";\nimport { SplashScreen } from \"./views/Splash\";\n\nconst navigationRef = createNavigationContainerRef<Record<string, unknown>>();\n\n/** Get the root navigation container ref. */\nexport function getNavigationContainerRef() {\n  return navigationRef;\n}\n\n/** react-navigation `NavigationContainer` with automatic `linking` prop generated from the routes context. */\nexport function NavigationContainer(props: { children: React.ReactNode }) {\n  const [isReady, setReady] = React.useState(false);\n  const [isSplashReady, setSplashReady] = React.useState(false);\n  const ref = React.useMemo(() => (isReady ? navigationRef : null), [isReady]);\n  const root = useRootRouteNodeContext();\n  const linking = React.useMemo(() => getLinkingConfig(root), [root]);\n\n  return (\n    <RootNavigationRef.Provider value={{ ref }}>\n      {!isSplashReady && <SplashScreen />}\n      <UpstreamNavigationContainer\n        {...props}\n        linking={linking}\n        ref={navigationRef}\n        onReady={() => {\n          setReady(true);\n          // Allow one cycle for the children to mount a splash screen\n          // that will prevent the splash screen from hiding.\n          requestAnimationFrame(() => {\n            setSplashReady(true);\n          });\n        }}\n      />\n    </RootNavigationRef.Provider>\n  );\n}\n"],"mappings":";;;;AAAA,SAASA,4BAA4B,QAAQ,0BAA0B;AACvE,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,2BAA2B;AAClC,SAASC,gBAAgB;AACzB,SAASC,iBAAiB;AAC1B,SAASC,uBAAuB;AAChC,SAASC,YAAY;AAAyB;AAAA;AAE9C,IAAMC,aAAa,GAAGP,4BAA4B,EAA2B;;AAG7E,OAAO,SAASQ,yBAAyB,GAAG;EAC1C,OAAOD,aAAa;AACtB;;AAGA,OAAO,SAASE,mBAAmB,CAACC,KAAoC,EAAE;EACxE,sBAA4BT,KAAK,CAACU,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA1CC,OAAO;IAAEC,QAAQ;EACxB,uBAAwCZ,KAAK,CAACU,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAtDG,aAAa;IAAEC,cAAc;EACpC,IAAMC,GAAG,GAAGf,KAAK,CAACgB,OAAO,CAAC;IAAA,OAAOL,OAAO,GAAGL,aAAa,GAAG,IAAI;EAAA,CAAC,EAAE,CAACK,OAAO,CAAC,CAAC;EAC5E,IAAMM,IAAI,GAAGb,uBAAuB,EAAE;EACtC,IAAMc,OAAO,GAAGlB,KAAK,CAACgB,OAAO,CAAC;IAAA,OAAMd,gBAAgB,CAACe,IAAI,CAAC;EAAA,GAAE,CAACA,IAAI,CAAC,CAAC;EAEnE,OACE,MAAC,iBAAiB,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAEF,GAAG,EAAHA;IAAI,CAAE;IAAA,WACxC,CAACF,aAAa,IAAI,KAAC,YAAY,KAAG,EACnC,KAAC,2BAA2B,kCACtBJ,KAAK;MACT,OAAO,EAAES,OAAQ;MACjB,GAAG,EAAEZ,aAAc;MACnB,OAAO,EAAE,mBAAM;QACbM,QAAQ,CAAC,IAAI,CAAC;QAGdO,qBAAqB,CAAC,YAAM;UAC1BL,cAAc,CAAC,IAAI,CAAC;QACtB,CAAC,CAAC;MACJ;IAAE,GACF;EAAA,EACyB;AAEjC"},"metadata":{},"sourceType":"module"}