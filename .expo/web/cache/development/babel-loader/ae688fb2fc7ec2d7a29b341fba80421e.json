{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport escape from \"escape-string-regexp\";\nimport * as queryString from \"query-string\";\nimport { findFocusedRoute } from \"./findFocusedRoute\";\nimport validatePathConfig from \"./validatePathConfig\";\nimport { matchGroupName, stripGroupSegmentsFromPath } from \"../matchers\";\nfunction getPathname(path) {\n  var remaining = path.replace(/\\/+/g, \"/\").replace(/^\\//, \"\").replace(/\\?.*$/, \"\");\n\n  return remaining.endsWith(\"/\") ? remaining : remaining + \"/\";\n}\n\nexport default function getStateFromPath(path, options) {\n  var _getMatchableRouteCon = getMatchableRouteConfigs(options),\n    initialRoutes = _getMatchableRouteCon.initialRoutes,\n    configs = _getMatchableRouteCon.configs;\n  return getStateFromPathWithConfigs(path, configs, initialRoutes);\n}\nexport function getMatchableRouteConfigs(options) {\n  if (options) {\n    validatePathConfig(options);\n  }\n  var screens = options == null ? void 0 : options.screens;\n  if (!screens) {\n    throw Error(\"You must pass a 'screens' object to 'getStateFromPath' to generate a path.\");\n  }\n\n  var initialRoutes = [];\n  if (options != null && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n\n  var converted = Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(key, screens, [], initialRoutes);\n  }).flat();\n  var resolvedInitialPatterns = initialRoutes.map(function (route) {\n    return joinPaths.apply(void 0, _toConsumableArray(route.parentScreens).concat([route.initialRouteName]));\n  });\n  var convertedWithInitial = converted.map(function (config) {\n    return _objectSpread(_objectSpread({}, config), {}, {\n      isInitial: resolvedInitialPatterns.includes(config.routeNames.join(\"/\"))\n    });\n  });\n\n  var configs = convertedWithInitial.sort(sortConfigs);\n\n  assertConfigDuplicates(configs);\n  return {\n    configs: configs,\n    initialRoutes: initialRoutes\n  };\n}\nfunction assertConfigDuplicates(configs) {\n  configs.reduce(function (acc, config) {\n    var _config$regex$toStrin, _config$regex;\n    var indexedKey = (_config$regex$toStrin = (_config$regex = config.regex) == null ? void 0 : _config$regex.toString()) != null ? _config$regex$toStrin : config.pattern;\n    var alpha = acc[indexedKey];\n    if (alpha && !alpha.hasChildren && !config.hasChildren) {\n      var a = alpha.routeNames;\n      var b = config.routeNames;\n\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n      if (!intersects) {\n        var last = config.pattern.split(\"/\").pop();\n        var routeType = last != null && last.startsWith(\":\") ? \"dynamic route\" : last != null && last.startsWith(\"*\") ? \"dynamic-rest route\" : \"route\";\n        throw new Error(\"The \" + routeType + \" pattern '\" + (config.pattern || \"/\") + \"' resolves to both '\" + alpha.userReadableName + \"' and '\" + config.userReadableName + \"'. Patterns must be unique and cannot resolve to more than one route.\");\n      }\n    }\n    return Object.assign(acc, _defineProperty({}, indexedKey, config));\n  }, {});\n}\nfunction sortConfigs(a, b) {\n\n  if (a.pattern === b.pattern) {\n    return b.routeNames.join(\">\").localeCompare(a.routeNames.join(\">\"));\n  }\n\n  if (a.pattern.startsWith(b.pattern) &&\n  b.screen !== \"index\") {\n    return -1;\n  }\n  if (b.pattern.startsWith(a.pattern) && a.screen !== \"index\") {\n    return 1;\n  }\n\n  var aParts = a.pattern.split(\"/\")\n  .filter(function (part) {\n    return matchGroupName(part) == null;\n  });\n  if (a.screen === \"index\") {\n    aParts.push(\"index\");\n  }\n  var bParts = b.pattern.split(\"/\").filter(function (part) {\n    return matchGroupName(part) == null;\n  });\n  if (b.screen === \"index\") {\n    bParts.push(\"index\");\n  }\n  for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n    if (aParts[i] == null) {\n      return 1;\n    }\n    if (bParts[i] == null) {\n      return -1;\n    }\n    var aWildCard = aParts[i].startsWith(\"*\");\n    var bWildCard = bParts[i].startsWith(\"*\");\n    if (aWildCard && bWildCard) {\n      continue;\n    }\n    if (aWildCard) {\n      return 1;\n    }\n    if (bWildCard) {\n      return -1;\n    }\n    var aSlug = aParts[i].startsWith(\":\");\n    var bSlug = bParts[i].startsWith(\":\");\n    if (aSlug && bSlug) {\n      continue;\n    }\n    if (aSlug) {\n      return 1;\n    }\n    if (bSlug) {\n      return -1;\n    }\n  }\n\n  if (a.isInitial && !b.isInitial) {\n    return -1;\n  }\n  if (!a.isInitial && b.isInitial) {\n    return 1;\n  }\n  return bParts.length - aParts.length;\n}\nfunction getStateFromEmptyPathWithConfigs(path, configs, initialRoutes) {\n  var _ref, _leafNodes$find;\n\n  var leafNodes = configs.filter(function (config) {\n    return !config.hasChildren;\n  }).map(function (value) {\n    return _objectSpread(_objectSpread({}, value), {}, {\n      path: stripGroupSegmentsFromPath(value.path)\n    });\n  });\n  var match = (_ref = (_leafNodes$find = leafNodes.find(function (config) {\n    return (\n      config.path === \"\" && (!config.regex || config.regex.test(\"\"))\n    );\n  })) != null ? _leafNodes$find : leafNodes.find(function (config) {\n    return (\n      config.path.startsWith(\":\") && config.regex.test(\"\")\n    );\n  })) != null ? _ref :\n  leafNodes.find(function (config) {\n    return config.path.startsWith(\"*\") && config.regex.test(\"/\");\n  });\n  if (!match) {\n    return undefined;\n  }\n  var routes = match.routeNames.map(function (name) {\n    return {\n      name: name,\n      _route: match._route\n    };\n  });\n  return createNestedStateObject(path, routes, configs, initialRoutes);\n}\nfunction getStateFromPathWithConfigs(path, configs, initialRoutes) {\n  var pathname = getPathname(path);\n  if (pathname === \"/\") {\n    return getStateFromEmptyPathWithConfigs(path, configs, initialRoutes);\n  }\n\n  var routes = matchAgainstConfigs(pathname, configs);\n  if (routes == null) {\n    return undefined;\n  }\n  return createNestedStateObject(path, routes, configs, initialRoutes);\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split(\"/\");\n  }))).filter(Boolean).join(\"/\");\n};\nfunction matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n\n  var _loop = function _loop(config) {\n    var _config$pattern;\n    if (!config.regex) {\n      return \"continue\";\n    }\n    var match = remainingPath.match(config.regex);\n\n    if (!match) {\n      return \"continue\";\n    }\n\n    var matchedParams = (_config$pattern = config.pattern) == null ? void 0 : _config$pattern.split(\"/\").filter(function (p) {\n      return p.match(/^[:*]/);\n    }).reduce(function (acc, p, i) {\n      var _ref3;\n      if (p.match(/^\\*/)) {\n        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, p, match[(i + 1) * 2]));\n      }\n      return Object.assign(acc, _defineProperty({}, p, (_ref3 = match[(i + 1) * 2]) == null ? void 0 : _ref3.replace(/\\//, \"\")));\n    }, {});\n    var routeFromName = function routeFromName(name) {\n      var config = configs.find(function (c) {\n        return c.screen === name;\n      });\n      if (!(config != null && config.path)) {\n        return {\n          name: name\n        };\n      }\n      var segments = config.path.split(\"/\");\n      var params = {};\n      segments.filter(function (p) {\n        return p.match(/^[:*]/);\n      }).forEach(function (p) {\n        var value = matchedParams[p];\n        if (value) {\n          var _config$parse;\n          if (p.match(/^\\*/)) {\n            var _value;\n            value = (_value = value) == null ? void 0 : _value.split(\"/\").filter(Boolean);\n          }\n          var key = p.replace(/^[:*]/, \"\").replace(/\\?$/, \"\");\n          params[key] = (_config$parse = config.parse) != null && _config$parse[key] ? config.parse[key](value) : value;\n        }\n      });\n      if (params && Object.keys(params).length) {\n        return {\n          name: name,\n          params: params\n        };\n      }\n      return {\n        name: name\n      };\n    };\n    routes = config.routeNames.map(function (name) {\n      return _objectSpread(_objectSpread({}, routeFromName(name)), {}, {\n        _route: config._route\n      });\n    });\n\n    var combinedParams = routes.reduce(function (acc, r) {\n      return Object.assign(acc, r.params);\n    }, {});\n    var hasCombinedParams = Object.keys(combinedParams).length > 0;\n\n    routes = routes.map(function (r) {\n      if (hasCombinedParams) {\n        r.params = combinedParams;\n      }\n      return r;\n    });\n    remainingPath = remainingPath.replace(match[1], \"\");\n    return \"break\";\n  };\n  for (var config of configs) {\n    var _ret = _loop(config);\n    if (_ret === \"continue\") continue;\n    if (_ret === \"break\") break;\n  }\n  return routes;\n}\nfunction equalHeritage(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (var i = 0; i < a.length; i++) {\n    if (a[i].localeCompare(b[i]) !== 0) {\n      return false;\n    }\n  }\n  return true;\n}\nvar createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var initials = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var parentScreens = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === \"string\") {\n\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config, false));\n  } else if (typeof config === \"object\") {\n    var _pattern;\n    var _route = config._route;\n    if (typeof config.path === \"string\") {\n      var _Object$keys;\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      _pattern = config.exact !== true ? joinPaths(parentPattern || \"\", config.path || \"\") : config.path || \"\";\n      configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.screens ? !!((_Object$keys = Object.keys(config.screens)) != null && _Object$keys.length) : false, config.parse, _route));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern2;\n        var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, _toConsumableArray(parentScreens), (_pattern2 = _pattern) != null ? _pattern2 : parentPattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nfunction formatRegexPattern(it) {\n  it = it.replace(\" \", \"%20\");\n  if (it.startsWith(\":\")) {\n    return \"(([^/]+\\\\/)\" + (it.endsWith(\"?\") ? \"?\" : \"\") + \")\";\n  } else if (it.startsWith(\"*\")) {\n    return \"((.*\\\\/)\" + (it.endsWith(\"?\") ? \"?\" : \"\") + \")\";\n  }\n\n  if (matchGroupName(it) != null) {\n    return \"(?:\" + escape(it) + \"\\\\/)?\";\n  }\n  return escape(it) + \"\\\\/\";\n}\nvar createConfigItem = function createConfigItem(screen, routeNames, pattern, path, hasChildren, parse, _route) {\n  pattern = pattern.split(\"/\").filter(Boolean).join(\"/\");\n  var regex = pattern ? new RegExp(\"^(\" + pattern.split(\"/\").map(formatRegexPattern).join(\"\") + \")$\") : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse,\n    userReadableName: [].concat(_toConsumableArray(routeNames.slice(0, -1)), [path || screen]).join(\"/\"),\n    hasChildren: !!hasChildren,\n    _route: _route\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, routeConfigs) {\n  for (var config of routeConfigs) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\n\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var config of initialRoutes) {\n    if (equalHeritage(parentScreens, config.parentScreens)) {\n      return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n    }\n  }\n  return undefined;\n};\n\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    }\n    return {\n      routes: [route]\n    };\n  }\n  if (initialRoute) {\n    return {\n      index: 1,\n      routes: [{\n        name: initialRoute\n      }, _objectSpread(_objectSpread({}, route), {}, {\n        state: {\n          routes: []\n        }\n      })]\n    };\n  }\n  return {\n    routes: [_objectSpread(_objectSpread({}, route), {}, {\n      state: {\n        routes: []\n      }\n    })]\n  };\n};\nvar createNestedStateObject = function createNestedStateObject(path, routes, routeConfigs, initialRoutes) {\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  var state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = findFocusedRoute(state);\n\n  route.path = stripGroupSegmentsFromPath(path);\n  var params = parseQueryParams(route.path, findParseConfigForRoute(route.name, routeConfigs));\n  if (params) {\n    var resolvedParams = _objectSpread(_objectSpread({}, route.params), params);\n    if (Object.keys(resolvedParams).length > 0) {\n      route.params = resolvedParams;\n    } else {\n      delete route.params;\n    }\n  }\n  return state;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split(\"?\")[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === \"string\") {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["escape","queryString","findFocusedRoute","validatePathConfig","matchGroupName","stripGroupSegmentsFromPath","getPathname","path","remaining","replace","endsWith","getStateFromPath","options","getMatchableRouteConfigs","initialRoutes","configs","getStateFromPathWithConfigs","screens","Error","initialRouteName","push","parentScreens","converted","Object","keys","map","key","createNormalizedConfigs","flat","resolvedInitialPatterns","route","joinPaths","convertedWithInitial","config","isInitial","includes","routeNames","join","sort","sortConfigs","assertConfigDuplicates","reduce","acc","indexedKey","regex","toString","pattern","alpha","hasChildren","a","b","intersects","length","every","it","i","last","split","pop","routeType","startsWith","userReadableName","assign","localeCompare","screen","aParts","filter","part","bParts","Math","max","aWildCard","bWildCard","aSlug","bSlug","getStateFromEmptyPathWithConfigs","leafNodes","value","match","find","test","undefined","routes","name","_route","createNestedStateObject","pathname","matchAgainstConfigs","paths","concat","p","Boolean","remainingPath","matchedParams","routeFromName","c","segments","params","forEach","parse","combinedParams","r","hasCombinedParams","equalHeritage","routeConfig","initials","parentPattern","createConfigItem","exact","nestedConfig","result","formatRegexPattern","RegExp","slice","findParseConfigForRoute","routeName","routeConfigs","findInitialRoute","createStateObject","initialRoute","isEmpty","index","state","shift","nestedState","nestedStateIndex","parseQueryParams","resolvedParams","parseConfig","query","hasOwnProperty","call"],"sources":["C:/react-project/rn-jobs/node_modules/expo-router/src/fork/getStateFromPath.ts"],"sourcesContent":["import { PathConfigMap } from \"@react-navigation/core\";\nimport type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from \"@react-navigation/routers\";\nimport escape from \"escape-string-regexp\";\nimport * as queryString from \"query-string\";\n\nimport { findFocusedRoute } from \"./findFocusedRoute\";\nimport validatePathConfig from \"./validatePathConfig\";\nimport { RouteNode } from \"../Route\";\nimport { matchGroupName, stripGroupSegmentsFromPath } from \"../matchers\";\n\ntype Options<ParamList extends object> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  isInitial?: boolean;\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n  hasChildren: boolean;\n  userReadableName: string;\n  _route?: RouteNode;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\nexport type ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\nfunction getPathname(path: string) {\n  const remaining = path\n    .replace(/\\/+/g, \"/\") // Replace multiple slash (//) with single ones\n    .replace(/^\\//, \"\") // Remove extra leading slash\n    .replace(/\\?.*$/, \"\"); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  return remaining.endsWith(\"/\") ? remaining : `${remaining}/`;\n}\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends object>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  const { initialRoutes, configs } = getMatchableRouteConfigs(options);\n\n  return getStateFromPathWithConfigs(path, configs, initialRoutes);\n}\n\nexport function getMatchableRouteConfigs<ParamList extends object>(\n  options?: Options<ParamList>\n) {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  const screens = options?.screens;\n  // Expo Router disallows usage without a linking config.\n  if (!screens) {\n    throw Error(\n      \"You must pass a 'screens' object to 'getStateFromPath' to generate a path.\"\n    );\n  }\n\n  // This will be mutated...\n  const initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  // Create a normalized configs array which will be easier to use.\n  const converted = Object.keys(screens)\n    .map((key) => createNormalizedConfigs(key, screens, [], initialRoutes))\n    .flat();\n\n  const resolvedInitialPatterns = initialRoutes.map((route) =>\n    joinPaths(...route.parentScreens, route.initialRouteName)\n  );\n\n  const convertedWithInitial = converted.map((config) => ({\n    ...config,\n    // TODO(EvanBacon): Probably a safer way to do this\n    // Mark initial routes to give them potential priority over other routes that match.\n    isInitial: resolvedInitialPatterns.includes(config.routeNames.join(\"/\")),\n  }));\n\n  // Sort in order of resolution. This is extremely important for the algorithm to work.\n  const configs = convertedWithInitial.sort(sortConfigs);\n\n  // Assert any duplicates before we start parsing.\n  assertConfigDuplicates(configs);\n\n  return { configs, initialRoutes };\n}\n\nfunction assertConfigDuplicates(configs: RouteConfig[]) {\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    // NOTE(EvanBacon): Uses the regex pattern as key to detect duplicate slugs.\n    const indexedKey = config.regex?.toString() ?? config.pattern;\n    const alpha = acc[indexedKey];\n    // NOTE(EvanBacon): Skips checking nodes that have children.\n    if (alpha && !alpha.hasChildren && !config.hasChildren) {\n      const a = alpha.routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        // NOTE(EvanBacon): Adds more context to the error message since we know about the\n        // file-based routing.\n        const last = config.pattern.split(\"/\").pop();\n        const routeType = last?.startsWith(\":\")\n          ? \"dynamic route\"\n          : last?.startsWith(\"*\")\n          ? \"dynamic-rest route\"\n          : \"route\";\n        throw new Error(\n          `The ${routeType} pattern '${\n            config.pattern || \"/\"\n          }' resolves to both '${alpha.userReadableName}' and '${\n            config.userReadableName\n          }'. Patterns must be unique and cannot resolve to more than one route.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [indexedKey]: config,\n    });\n  }, {});\n}\n\nfunction sortConfigs(a: RouteConfig, b: RouteConfig): number {\n  // Sort config so that:\n  // - the most exhaustive ones are always at the beginning\n  // - patterns with wildcard are always at the end\n\n  // If 2 patterns are same, move the one with less route names up\n  // This is an error state, so it's only useful for consistent error messages\n  if (a.pattern === b.pattern) {\n    return b.routeNames.join(\">\").localeCompare(a.routeNames.join(\">\"));\n  }\n\n  // If one of the patterns starts with the other, it's more exhaustive\n  // So move it up\n  if (\n    a.pattern.startsWith(b.pattern) &&\n    // NOTE(EvanBacon): This is a hack to make sure that `*` is always at the end\n    b.screen !== \"index\"\n  ) {\n    return -1;\n  }\n\n  if (b.pattern.startsWith(a.pattern) && a.screen !== \"index\") {\n    return 1;\n  }\n\n  // NOTE(EvanBacon): Here we append `index` if the screen was `index` so the length is the same\n  // as a slug or wildcard when nested more than one level deep.\n  // This is so we can compare the length of the pattern, e.g. `foo/*` > `foo` vs `*` < ``.\n  const aParts = a.pattern\n    .split(\"/\")\n    // Strip out group names to ensure they don't affect the priority.\n    .filter((part) => matchGroupName(part) == null);\n  if (a.screen === \"index\") {\n    aParts.push(\"index\");\n  }\n\n  const bParts = b.pattern\n    .split(\"/\")\n    .filter((part) => matchGroupName(part) == null);\n  if (b.screen === \"index\") {\n    bParts.push(\"index\");\n  }\n\n  for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n    // if b is longer, b get higher priority\n    if (aParts[i] == null) {\n      return 1;\n    }\n    // if a is longer, a get higher priority\n    if (bParts[i] == null) {\n      return -1;\n    }\n    const aWildCard = aParts[i].startsWith(\"*\");\n    const bWildCard = bParts[i].startsWith(\"*\");\n    // if both are wildcard we compare next component\n    if (aWildCard && bWildCard) {\n      continue;\n    }\n    // if only a is wild card, b get higher priority\n    if (aWildCard) {\n      return 1;\n    }\n    // if only b is wild card, a get higher priority\n    if (bWildCard) {\n      return -1;\n    }\n\n    const aSlug = aParts[i].startsWith(\":\");\n    const bSlug = bParts[i].startsWith(\":\");\n    // if both are wildcard we compare next component\n    if (aSlug && bSlug) {\n      continue;\n    }\n    // if only a is wild card, b get higher priority\n    if (aSlug) {\n      return 1;\n    }\n    // if only b is wild card, a get higher priority\n    if (bSlug) {\n      return -1;\n    }\n  }\n\n  // Sort initial routes with a higher priority than routes which will push more screens\n  // this ensures shared routes go to the shortest path.\n  if (a.isInitial && !b.isInitial) {\n    return -1;\n  }\n  if (!a.isInitial && b.isInitial) {\n    return 1;\n  }\n\n  return bParts.length - aParts.length;\n}\n\nfunction getStateFromEmptyPathWithConfigs(\n  path: string,\n  configs: RouteConfig[],\n  initialRoutes: InitialRouteConfig[]\n): ResultState | undefined {\n  // We need to add special handling of empty path so navigation to empty path also works\n  // When handling empty path, we should only look at the root level config\n\n  // NOTE(EvanBacon): We only care about matching leaf nodes.\n  const leafNodes = configs\n    .filter((config) => !config.hasChildren)\n    .map((value) => {\n      return {\n        ...value,\n        // Collapse all levels of group segments before testing.\n        // This enables `app/(one)/(two)/index.js` to be matched.\n        path: stripGroupSegmentsFromPath(value.path),\n      };\n    });\n\n  const match =\n    leafNodes.find(\n      (config) =>\n        // NOTE(EvanBacon): Test leaf node index routes that either don't have a regex or match an empty string.\n        config.path === \"\" && (!config.regex || config.regex.test(\"\"))\n    ) ??\n    leafNodes.find(\n      (config) =>\n        // NOTE(EvanBacon): Test leaf node dynamic routes that match an empty string.\n        config.path.startsWith(\":\") && config.regex!.test(\"\")\n    ) ??\n    // NOTE(EvanBacon): Test leaf node deep dynamic routes that match a slash.\n    // This should be done last to enable dynamic routes having a higher priority.\n    leafNodes.find(\n      (config) => config.path.startsWith(\"*\") && config.regex!.test(\"/\")\n    );\n\n  if (!match) {\n    return undefined;\n  }\n\n  const routes = match.routeNames.map((name) => ({\n    name,\n    _route: match._route,\n  }));\n\n  return createNestedStateObject(path, routes, configs, initialRoutes);\n}\n\nfunction getStateFromPathWithConfigs(\n  path: string,\n  configs: RouteConfig[],\n  initialRoutes: InitialRouteConfig[]\n): ResultState | undefined {\n  const pathname = getPathname(path);\n\n  if (pathname === \"/\") {\n    return getStateFromEmptyPathWithConfigs(path, configs, initialRoutes);\n  }\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const routes = matchAgainstConfigs(pathname, configs);\n\n  if (routes == null) {\n    return undefined;\n  }\n  // This will always be empty if full path matched\n  return createNestedStateObject(path, routes, configs, initialRoutes);\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split(\"/\")))\n    .filter(Boolean)\n    .join(\"/\");\n\nfunction matchAgainstConfigs(\n  remaining: string,\n  configs: RouteConfig[]\n): ParsedRoute[] | undefined {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (!match) {\n      continue;\n    }\n\n    // TODO: Add support for wildcard routes\n    const matchedParams = config.pattern\n      ?.split(\"/\")\n      .filter((p) => p.match(/^[:*]/))\n      .reduce<Record<string, any>>((acc, p, i) => {\n        if (p.match(/^\\*/)) {\n          return {\n            ...acc,\n            [p]: match![(i + 1) * 2], //?.replace(/\\//, \"\"),\n          };\n        }\n        return Object.assign(acc, {\n          // The param segments appear every second item starting from 2 in the regex match result.\n          // This will only work if we ensure groups aren't included in the match.\n          [p]: match![(i + 1) * 2]?.replace(/\\//, \"\"),\n        });\n      }, {});\n\n    const routeFromName = (name: string) => {\n      const config = configs.find((c) => c.screen === name);\n      if (!config?.path) {\n        return { name };\n      }\n\n      const segments = config.path.split(\"/\");\n\n      const params: Record<string, any> = {};\n\n      segments\n        .filter((p) => p.match(/^[:*]/))\n        .forEach((p) => {\n          let value = matchedParams[p];\n          if (value) {\n            if (p.match(/^\\*/)) {\n              // Convert to an array before providing as a route.\n              value = value?.split(\"/\").filter(Boolean);\n            }\n\n            const key = p.replace(/^[:*]/, \"\").replace(/\\?$/, \"\");\n            params[key] = config.parse?.[key]\n              ? config.parse[key](value)\n              : value;\n          }\n        });\n\n      if (params && Object.keys(params).length) {\n        return { name, params };\n      }\n\n      return { name };\n    };\n\n    routes = config.routeNames.map((name) => ({\n      ...routeFromName(name),\n      _route: config._route,\n    }));\n\n    // TODO(EvanBacon): Maybe we should warn / assert if multiple slugs use the same param name.\n    const combinedParams = routes.reduce<Record<string, any>>(\n      (acc, r) => Object.assign(acc, r.params),\n      {}\n    );\n\n    const hasCombinedParams = Object.keys(combinedParams).length > 0;\n\n    // Combine all params so a route `[foo]/[bar]/other.js` has access to `{ foo, bar }`\n    routes = routes.map((r) => {\n      if (hasCombinedParams) {\n        r.params = combinedParams;\n      }\n      return r;\n    });\n\n    remainingPath = remainingPath.replace(match[1], \"\");\n\n    break;\n  }\n\n  return routes;\n}\n\nfunction equalHeritage(a: string[], b: string[]): boolean {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i].localeCompare(b[i]) !== 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[] = [],\n  parentScreens: string[] = [],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  const config = (routeConfig as any)[screen];\n\n  if (typeof config === \"string\") {\n    // TODO: This should never happen with the addition of `_route`\n\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config, false));\n  } else if (typeof config === \"object\") {\n    let pattern: string | undefined;\n\n    const { _route } = config;\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === \"string\") {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || \"\", config.path || \"\")\n          : config.path || \"\";\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.screens ? !!Object.keys(config.screens)?.length : false,\n          config.parse,\n          _route\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nfunction formatRegexPattern(it: string): string {\n  // Allow spaces in file path names.\n  it = it.replace(\" \", \"%20\");\n\n  if (it.startsWith(\":\")) {\n    // TODO: Remove unused match group\n    return `(([^/]+\\\\/)${it.endsWith(\"?\") ? \"?\" : \"\"})`;\n  } else if (it.startsWith(\"*\")) {\n    return `((.*\\\\/)${it.endsWith(\"?\") ? \"?\" : \"\"})`;\n  }\n\n  // Strip groups from the matcher\n  if (matchGroupName(it) != null) {\n    // Groups are optional segments\n    // this enables us to match `/bar` and `/(foo)/bar` for the same route\n    // NOTE(EvanBacon): Ignore this match in the regex to avoid capturing the group\n    return `(?:${escape(it)}\\\\/)?`;\n  }\n\n  return escape(it) + `\\\\/`;\n}\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  hasChildren?: boolean,\n  parse?: ParseConfig,\n  _route?: any\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split(\"/\").filter(Boolean).join(\"/\");\n\n  const regex = pattern\n    ? new RegExp(`^(${pattern.split(\"/\").map(formatRegexPattern).join(\"\")})$`)\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n    userReadableName: [...routeNames.slice(0, -1), path || screen].join(\"/\"),\n    hasChildren: !!hasChildren,\n    _route,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  routeConfigs: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of routeConfigs) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (equalHeritage(parentScreens, config.parentScreens)) {\n      // If the parents are the same but the route name doesn't match the initial route\n      // then we return the initial route.\n      return routeName !== config.initialRouteName\n        ? config.initialRouteName\n        : undefined;\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    }\n    return {\n      routes: [route],\n    };\n  }\n\n  if (initialRoute) {\n    return {\n      index: 1,\n      routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n    };\n  }\n  return {\n    routes: [{ ...route, state: { routes: [] } }],\n  };\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  routeConfigs: RouteConfig[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  const state: InitialState = createStateObject(\n    initialRoute,\n    route,\n    routes.length === 0\n  );\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n\n  // Remove groups from the path while preserving a trailing slash.\n  route.path = stripGroupSegmentsFromPath(path);\n\n  const params = parseQueryParams(\n    route.path,\n    findParseConfigForRoute(route.name, routeConfigs)\n  );\n\n  if (params) {\n    const resolvedParams = { ...route.params, ...params };\n    if (Object.keys(resolvedParams).length > 0) {\n      route.params = resolvedParams;\n    } else {\n      delete route.params;\n    }\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split(\"?\")[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === \"string\"\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}