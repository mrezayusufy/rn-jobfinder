{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { NavigationContainer } from \"./NavigationContainer\";\nimport { useTutorial } from \"./onboard/useTutorial\";\nimport { InitialRootStateProvider } from \"./useInitialRootStateContext\";\nimport { RootRouteNodeProvider, useRootRouteNodeContext } from \"./useRootRouteNodeContext\";\nimport { getQualifiedRouteComponent } from \"./useScreens\";\nimport { SplashScreen } from \"./views/Splash\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getGestureHandlerRootView() {\n  try {\n    var _ref = require(\"react-native-gesture-handler\"),\n      _GestureHandlerRootView = _ref.GestureHandlerRootView;\n    return function GestureHandler(props) {\n      return _jsx(_GestureHandlerRootView, _objectSpread({\n        style: {\n          flex: 1\n        }\n      }, props));\n    };\n  } catch (_unused) {\n    return React.Fragment;\n  }\n}\nvar GestureHandlerRootView = getGestureHandlerRootView();\nvar INITIAL_METRICS = {\n  frame: {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n};\nexport function ExpoRoot(_ref2) {\n  var context = _ref2.context;\n  return _jsx(GestureHandlerRootView, {\n    children: _jsxs(SafeAreaProvider\n    , {\n      initialMetrics: INITIAL_METRICS,\n      children: [_jsx(ContextNavigator, {\n        context: context\n      }), _jsx(StatusBar, {\n        style: \"auto\"\n      })]\n    })\n  });\n}\nfunction ContextNavigator(_ref3) {\n  var context = _ref3.context;\n  if (process.env.NODE_ENV !== \"production\") {\n    var Tutorial = useTutorial(context);\n    if (Tutorial) {\n      SplashScreen.hideAsync();\n      return _jsx(Tutorial, {});\n    }\n  }\n  return _jsx(RootRouteNodeProvider, {\n    context: context,\n    children: _jsx(NavigationContainer, {\n      children: _jsx(InitialRootStateProvider, {\n        children: _jsx(RootRoute, {})\n      })\n    })\n  });\n}\nfunction RootRoute() {\n  var Component = getQualifiedRouteComponent(useRootRouteNodeContext());\n  return _jsx(Component, {});\n}","map":{"version":3,"names":["StatusBar","React","SafeAreaProvider","NavigationContainer","useTutorial","InitialRootStateProvider","RootRouteNodeProvider","useRootRouteNodeContext","getQualifiedRouteComponent","SplashScreen","getGestureHandlerRootView","require","GestureHandlerRootView","GestureHandler","props","flex","Fragment","INITIAL_METRICS","frame","x","y","width","height","insets","top","left","right","bottom","ExpoRoot","context","ContextNavigator","process","env","NODE_ENV","Tutorial","hideAsync","RootRoute","Component"],"sources":["C:/react-project/rn-jobs/node_modules/expo-router/src/ExpoRoot.tsx"],"sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport { NavigationContainer } from \"./NavigationContainer\";\nimport { useTutorial } from \"./onboard/useTutorial\";\nimport { RequireContext } from \"./types\";\nimport { InitialRootStateProvider } from \"./useInitialRootStateContext\";\nimport {\n  RootRouteNodeProvider,\n  useRootRouteNodeContext,\n} from \"./useRootRouteNodeContext\";\nimport { getQualifiedRouteComponent } from \"./useScreens\";\nimport { SplashScreen } from \"./views/Splash\";\n\nfunction getGestureHandlerRootView() {\n  try {\n    const { GestureHandlerRootView } =\n      require(\"react-native-gesture-handler\") as typeof import(\"react-native-gesture-handler\");\n\n    return function GestureHandler(props: any) {\n      return <GestureHandlerRootView style={{ flex: 1 }} {...props} />;\n    };\n  } catch {\n    return React.Fragment;\n  }\n}\n\nconst GestureHandlerRootView = getGestureHandlerRootView();\n\nconst INITIAL_METRICS = {\n  frame: { x: 0, y: 0, width: 0, height: 0 },\n  insets: { top: 0, left: 0, right: 0, bottom: 0 },\n};\n\nexport function ExpoRoot({ context }: { context: RequireContext }) {\n  return (\n    <GestureHandlerRootView>\n      <SafeAreaProvider\n        // SSR support\n        initialMetrics={INITIAL_METRICS}\n      >\n        <ContextNavigator context={context} />\n        {/* Users can override this by adding another StatusBar element anywhere higher in the component tree. */}\n        <StatusBar style=\"auto\" />\n      </SafeAreaProvider>\n    </GestureHandlerRootView>\n  );\n}\n\nfunction ContextNavigator({ context }: { context: RequireContext }) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const Tutorial = useTutorial(context);\n    if (Tutorial) {\n      SplashScreen.hideAsync();\n      return <Tutorial />;\n    }\n  }\n\n  return (\n    <RootRouteNodeProvider context={context}>\n      <NavigationContainer>\n        <InitialRootStateProvider>\n          <RootRoute />\n        </InitialRootStateProvider>\n      </NavigationContainer>\n    </RootRouteNodeProvider>\n  );\n}\n\nfunction RootRoute() {\n  const Component = getQualifiedRouteComponent(useRootRouteNodeContext());\n  return <Component />;\n}\n"],"mappings":";;;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,QAAQ,gCAAgC;AAEjE,SAASC,mBAAmB;AAC5B,SAASC,WAAW;AAEpB,SAASC,wBAAwB;AACjC,SACEC,qBAAqB,EACrBC,uBAAuB;AAEzB,SAASC,0BAA0B;AACnC,SAASC,YAAY;AAAyB;AAAA;AAE9C,SAASC,yBAAyB,GAAG;EACnC,IAAI;IACF,WACEC,OAAO,CAAC,8BAA8B,CAAC;MADjCC,uBAAsB,QAAtBA,sBAAsB;IAG9B,OAAO,SAASC,cAAc,CAACC,KAAU,EAAE;MACzC,OAAO,KAAC,uBAAsB;QAAC,KAAK,EAAE;UAAEC,IAAI,EAAE;QAAE;MAAE,GAAKD,KAAK,EAAI;IAClE,CAAC;EACH,CAAC,CAAC,gBAAM;IACN,OAAOb,KAAK,CAACe,QAAQ;EACvB;AACF;AAEA,IAAMJ,sBAAsB,GAAGF,yBAAyB,EAAE;AAE1D,IAAMO,eAAe,GAAG;EACtBC,KAAK,EAAE;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE,CAAC;IAAEC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC;EAC1CC,MAAM,EAAE;IAAEC,GAAG,EAAE,CAAC;IAAEC,IAAI,EAAE,CAAC;IAAEC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE;AACjD,CAAC;AAED,OAAO,SAASC,QAAQ,QAA2C;EAAA,IAAxCC,OAAO,SAAPA,OAAO;EAChC,OACE,KAAC,sBAAsB;IAAA,UACrB,MAAC;IAAgB;MAEf,cAAc,EAAEZ,eAAgB;MAAA,WAEhC,KAAC,gBAAgB;QAAC,OAAO,EAAEY;MAAQ,EAAG,EAEtC,KAAC,SAAS;QAAC,KAAK,EAAC;MAAM,EAAG;IAAA;EACT,EACI;AAE7B;AAEA,SAASC,gBAAgB,QAA2C;EAAA,IAAxCD,OAAO,SAAPA,OAAO;EACjC,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IAEzC,IAAMC,QAAQ,GAAG9B,WAAW,CAACyB,OAAO,CAAC;IACrC,IAAIK,QAAQ,EAAE;MACZzB,YAAY,CAAC0B,SAAS,EAAE;MACxB,OAAO,KAAC,QAAQ,KAAG;IACrB;EACF;EAEA,OACE,KAAC,qBAAqB;IAAC,OAAO,EAAEN,OAAQ;IAAA,UACtC,KAAC,mBAAmB;MAAA,UAClB,KAAC,wBAAwB;QAAA,UACvB,KAAC,SAAS;MAAG;IACY;EACP,EACA;AAE5B;AAEA,SAASO,SAAS,GAAG;EACnB,IAAMC,SAAS,GAAG7B,0BAA0B,CAACD,uBAAuB,EAAE,CAAC;EACvE,OAAO,KAAC,SAAS,KAAG;AACtB"},"metadata":{},"sourceType":"module"}