{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogBoxLog = void 0;\nvar LogBoxSymbolication = __importStar(require(\"./LogBoxSymbolication\"));\nfunction componentStackToStack(componentStack) {\n  return componentStack.map(function (stack) {\n    var _a, _b, _c, _d;\n    return {\n      file: stack.fileName,\n      methodName: stack.content,\n      lineNumber: (_b = (_a = stack.location) === null || _a === void 0 ? void 0 : _a.row) !== null && _b !== void 0 ? _b : 0,\n      column: (_d = (_c = stack.location) === null || _c === void 0 ? void 0 : _c.column) !== null && _d !== void 0 ? _d : 0,\n      arguments: []\n    };\n  });\n}\nvar LogBoxLog = function () {\n  function LogBoxLog(data) {\n    _classCallCheck(this, LogBoxLog);\n    var _a;\n    this.symbolicated = {\n      stack: {\n        error: null,\n        stack: null,\n        status: \"NONE\"\n      },\n      component: {\n        error: null,\n        stack: null,\n        status: \"NONE\"\n      }\n    };\n    this.componentStackCache = null;\n    this.level = data.level;\n    this.type = (_a = data.type) !== null && _a !== void 0 ? _a : \"error\";\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n  }\n  _createClass(LogBoxLog, [{\n    key: \"incrementCount\",\n    value: function incrementCount() {\n      this.count += 1;\n    }\n  }, {\n    key: \"getAvailableStack\",\n    value: function getAvailableStack(type) {\n      if (this.symbolicated[type].status === \"COMPLETE\") {\n        return this.symbolicated[type].stack;\n      }\n      return this.getStack(type);\n    }\n  }, {\n    key: \"retrySymbolicate\",\n    value: function retrySymbolicate(type, callback) {\n      if (this.symbolicated[type].status !== \"COMPLETE\") {\n        LogBoxSymbolication.deleteStack(this.getStack(type));\n        this.handleSymbolicate(type, callback);\n      }\n    }\n  }, {\n    key: \"symbolicate\",\n    value: function symbolicate(type, callback) {\n      if (this.symbolicated[type].status === \"NONE\") {\n        this.handleSymbolicate(type, callback);\n      }\n    }\n  }, {\n    key: \"getStack\",\n    value: function getStack(type) {\n      if (type === \"component\") {\n        if (this.componentStackCache == null) {\n          this.componentStackCache = componentStackToStack(this.componentStack);\n        }\n        return this.componentStackCache;\n      }\n      return this.stack;\n    }\n  }, {\n    key: \"handleSymbolicate\",\n    value: function handleSymbolicate(type, callback) {\n      var _this = this;\n      var _a;\n      if (type === \"component\" && !((_a = this.componentStack) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      if (this.symbolicated[type].status !== \"PENDING\") {\n        this.updateStatus(type, null, null, null, callback);\n        LogBoxSymbolication.symbolicate(this.getStack(type)).then(function (data) {\n          _this.updateStatus(type, null, data === null || data === void 0 ? void 0 : data.stack, data === null || data === void 0 ? void 0 : data.codeFrame, callback);\n        }, function (error) {\n          _this.updateStatus(type, error, null, null, callback);\n        });\n      }\n    }\n  }, {\n    key: \"updateStatus\",\n    value: function updateStatus(type, error, stack, codeFrame, callback) {\n      var lastStatus = this.symbolicated[type].status;\n      if (error != null) {\n        this.symbolicated[type] = {\n          error: error,\n          stack: null,\n          status: \"FAILED\"\n        };\n      } else if (stack != null) {\n        if (codeFrame) {\n          this.codeFrame = codeFrame;\n        }\n        this.symbolicated[type] = {\n          error: null,\n          stack: stack,\n          status: \"COMPLETE\"\n        };\n      } else {\n        this.symbolicated[type] = {\n          error: null,\n          stack: null,\n          status: \"PENDING\"\n        };\n      }\n      if (callback && lastStatus !== this.symbolicated[type].status) {\n        callback(this.symbolicated[type].status);\n      }\n    }\n  }]);\n  return LogBoxLog;\n}();\nexports.LogBoxLog = LogBoxLog;","map":{"version":3,"mappings":"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","names":["componentStackToStack","componentStack","map","stack","file","fileName","methodName","content","lineNumber","location","row","column","arguments","LogBoxLog","data","error","status","component","level","type","message","category","codeFrame","isComponentError","count","symbolicated","getStack","callback","LogBoxSymbolication","deleteStack","handleSymbolicate","componentStackCache","length","updateStatus","symbolicate","then","lastStatus","exports"],"sourceRoot":"","sources":["../../../src/error-overlay/Data/LogBoxLog.ts"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as LogBoxSymbolication from \"./LogBoxSymbolication\";\nimport type { Stack } from \"./LogBoxSymbolication\";\nimport type {\n  Category,\n  Message,\n  ComponentStack,\n  CodeFrame,\n} from \"./parseLogBoxLog\";\n\ntype SymbolicationStatus = \"NONE\" | \"PENDING\" | \"COMPLETE\" | \"FAILED\";\n\nexport type LogLevel = \"warn\" | \"error\" | \"fatal\" | \"syntax\";\n\nexport type LogBoxLogData = {\n  level: LogLevel;\n  type?: string;\n  message: Message;\n  stack: Stack;\n  category: string;\n  componentStack: ComponentStack;\n  codeFrame?: CodeFrame;\n  isComponentError: boolean;\n};\n\nexport type StackType = \"stack\" | \"component\";\n\nfunction componentStackToStack(componentStack: ComponentStack): Stack {\n  return componentStack.map((stack) => ({\n    file: stack.fileName,\n    methodName: stack.content,\n    lineNumber: stack.location?.row ?? 0,\n    column: stack.location?.column ?? 0,\n    arguments: [],\n  }));\n}\n\nexport class LogBoxLog {\n  message: Message;\n  type: string;\n  category: Category;\n  componentStack: ComponentStack;\n  stack: Stack;\n  count: number;\n  level: LogLevel;\n  codeFrame?: CodeFrame;\n  isComponentError: boolean;\n  symbolicated: Record<\n    StackType,\n    | { error: null; stack: null; status: \"NONE\" }\n    | { error: null; stack: null; status: \"PENDING\" }\n    | { error: null; stack: Stack; status: \"COMPLETE\" }\n    | { error: Error; stack: null; status: \"FAILED\" }\n  > = {\n    stack: {\n      error: null,\n      stack: null,\n      status: \"NONE\",\n    },\n    component: {\n      error: null,\n      stack: null,\n      status: \"NONE\",\n    },\n  };\n\n  constructor(data: LogBoxLogData) {\n    this.level = data.level;\n    this.type = data.type ?? \"error\";\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n  }\n\n  incrementCount(): void {\n    this.count += 1;\n  }\n\n  getAvailableStack(type: StackType): Stack | null {\n    if (this.symbolicated[type].status === \"COMPLETE\") {\n      return this.symbolicated[type].stack;\n    }\n    return this.getStack(type);\n  }\n\n  retrySymbolicate(\n    type: StackType,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    if (this.symbolicated[type].status !== \"COMPLETE\") {\n      LogBoxSymbolication.deleteStack(this.getStack(type));\n      this.handleSymbolicate(type, callback);\n    }\n  }\n\n  symbolicate(\n    type: StackType,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    if (this.symbolicated[type].status === \"NONE\") {\n      this.handleSymbolicate(type, callback);\n    }\n  }\n\n  private componentStackCache: Stack | null = null;\n\n  private getStack(type: StackType): Stack {\n    if (type === \"component\") {\n      if (this.componentStackCache == null) {\n        this.componentStackCache = componentStackToStack(this.componentStack);\n      }\n      return this.componentStackCache;\n    }\n    return this.stack;\n  }\n\n  private handleSymbolicate(\n    type: StackType,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    if (type === \"component\" && !this.componentStack?.length) {\n      return;\n    }\n\n    if (this.symbolicated[type].status !== \"PENDING\") {\n      this.updateStatus(type, null, null, null, callback);\n      LogBoxSymbolication.symbolicate(this.getStack(type)).then(\n        (data) => {\n          this.updateStatus(type, null, data?.stack, data?.codeFrame, callback);\n        },\n        (error) => {\n          this.updateStatus(type, error, null, null, callback);\n        }\n      );\n    }\n  }\n\n  private updateStatus(\n    type: StackType,\n    error?: Error | null,\n    stack?: Stack | null,\n    codeFrame?: CodeFrame | null,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    const lastStatus = this.symbolicated[type].status;\n    if (error != null) {\n      this.symbolicated[type] = {\n        error,\n        stack: null,\n        status: \"FAILED\",\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n\n      this.symbolicated[type] = {\n        error: null,\n        stack,\n        status: \"COMPLETE\",\n      };\n    } else {\n      this.symbolicated[type] = {\n        error: null,\n        stack: null,\n        status: \"PENDING\",\n      };\n    }\n\n    if (callback && lastStatus !== this.symbolicated[type].status) {\n      callback(this.symbolicated[type].status);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}