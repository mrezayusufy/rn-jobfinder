{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar expo_modules_core_1 = require(\"expo-modules-core\");\nvar qs_1 = __importDefault(require(\"qs\"));\nvar getDevServer = function getDevServer() {\n  if (!expo_modules_core_1.Platform.isDOMAvailable) {\n    return {\n      bundleLoadedFromServer: true,\n      fullBundleUrl: \"\",\n      url: \"\"\n    };\n  }\n  return {\n    bundleLoadedFromServer: true,\n    get fullBundleUrl() {\n      if ((document === null || document === void 0 ? void 0 : document.currentScript) && \"src\" in document.currentScript) {\n        return document.currentScript.src;\n      }\n      var url = window.location.toString();\n      var query = qs_1.default.parse(url);\n      return location.origin + location.pathname + \"?\" + qs_1.default.stringify(_objectSpread(_objectSpread({}, query), {}, {\n        platform: expo_modules_core_1.Platform.OS\n      }));\n    },\n    url: location.origin + location.pathname\n  };\n};\nmodule.exports = getDevServer;\nexports.default = getDevServer;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;AACA;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAY,GAAQ;EAExB,IAAI,CAACC,4BAAQ,CAACC,cAAc,EAAE;IAC5B,OAAO;MACLC,sBAAsB,EAAE,IAAI;MAC5BC,aAAa,EAAE,EAAE;MACjBC,GAAG,EAAE;KACN;;EAGH,OAAO;IAELF,sBAAsB,EAAE,IAAI;IAG5B,IAAIC,aAAa;MACf,IAAI,SAAQ,aAARE,QAAQ,uBAARA,QAAQ,CAAEC,aAAa,KAAI,KAAK,IAAID,QAAQ,CAACC,aAAa,EAAE;QAC9D,OAAOD,QAAQ,CAACC,aAAa,CAACC,GAAG;;MAGnC,IAAMH,GAAG,GAAGI,MAAM,CAACC,QAAQ,CAACC,QAAQ,EAAE;MACtC,IAAMC,KAAK,GAAGC,YAAE,CAACC,KAAK,CAACT,GAAG,CAAC;MAE3B,OACEK,QAAQ,CAACK,MAAM,GACfL,QAAQ,CAACM,QAAQ,GACjB,GAAG,GACHH,YAAE,CAACI,SAAS,iCAAML,KAAK;QAAEM,QAAQ,EAAEjB,4BAAQ,CAACkB;MAAE,GAAG;IAErD,CAAC;IACDd,GAAG,EAAEK,QAAQ,CAACK,MAAM,GAAGL,QAAQ,CAACM;GACjC;AACH,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAGrB,YAAY;AAC7BqB,kBAAerB,YAAY","names":["getDevServer","expo_modules_core_1","isDOMAvailable","bundleLoadedFromServer","fullBundleUrl","url","document","currentScript","src","window","location","toString","query","qs_1","parse","origin","pathname","stringify","platform","OS","module","exports"],"sourceRoot":"","sources":["../src/getDevServer.ts"],"sourcesContent":["import { Platform } from \"expo-modules-core\";\nimport qs from \"qs\";\n\nconst getDevServer = () => {\n  // Disable for SSR\n  if (!Platform.isDOMAvailable) {\n    return {\n      bundleLoadedFromServer: true,\n      fullBundleUrl: \"\",\n      url: \"\",\n    };\n  }\n\n  return {\n    // The bundle is always loaded from a server in the browser.\n    bundleLoadedFromServer: true,\n\n    /** URL but ensures that platform query param is added. */\n    get fullBundleUrl() {\n      if (document?.currentScript && \"src\" in document.currentScript) {\n        return document.currentScript.src;\n      }\n\n      const url = window.location.toString();\n      const query = qs.parse(url);\n\n      return (\n        location.origin +\n        location.pathname +\n        \"?\" +\n        qs.stringify({ ...query, platform: Platform.OS })\n      );\n    },\n    url: location.origin + location.pathname,\n  };\n};\n\nmodule.exports = getDevServer;\nexport default getDevServer;\n"]},"metadata":{},"sourceType":"script"}