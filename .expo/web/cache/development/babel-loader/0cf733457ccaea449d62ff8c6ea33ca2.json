{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useRejectionHandler = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nvar ExceptionsManager_1 = __importDefault(require(\"./modules/ExceptionsManager\"));\nfunction useStackTraceLimit(limit) {\n  var current = react_1.default.useRef(0);\n  react_1.default.useEffect(function () {\n    try {\n      var currentLimit = Error.stackTraceLimit;\n      Error.stackTraceLimit = limit;\n      current.current = currentLimit;\n    } catch (_unused) {}\n    return function () {\n      try {\n        Error.stackTraceLimit = current.current;\n      } catch (_unused2) {}\n    };\n  }, [limit]);\n}\nfunction useRejectionHandler() {\n  var hasError = react_1.default.useRef(false);\n  useStackTraceLimit(35);\n  react_1.default.useEffect(function () {\n    function onUnhandledError(ev) {\n      hasError.current = true;\n      var error = ev === null || ev === void 0 ? void 0 : ev.error;\n      if (!error || !(error instanceof Error) || typeof error.stack !== \"string\") {\n        return;\n      }\n      ExceptionsManager_1.default.handleException(error);\n    }\n    function onUnhandledRejection(ev) {\n      hasError.current = true;\n      var reason = ev === null || ev === void 0 ? void 0 : ev.reason;\n      if (!reason || !(reason instanceof Error) || typeof reason.stack !== \"string\") {\n        return;\n      }\n      ExceptionsManager_1.default.handleException(reason);\n    }\n    window.addEventListener(\"unhandledrejection\", onUnhandledRejection);\n    window.addEventListener(\"error\", onUnhandledError);\n    return function () {\n      window.removeEventListener(\"error\", onUnhandledError);\n      window.removeEventListener(\"unhandledrejection\", onUnhandledRejection);\n    };\n  }, []);\n  return hasError;\n}\nexports.useRejectionHandler = useRejectionHandler;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AAEA;AAEA,SAASA,kBAAkB,CAACC,KAAa;EACvC,IAAMC,OAAO,GAAGC,eAAK,CAACC,MAAM,CAAC,CAAC,CAAC;EAC/BD,eAAK,CAACE,SAAS,CAAC,YAAK;IACnB,IAAI;MACF,IAAMC,YAAY,GAAGC,KAAK,CAACC,eAAe;MAC1CD,KAAK,CAACC,eAAe,GAAGP,KAAK;MAC7BC,OAAO,CAACA,OAAO,GAAGI,YAAY;KAC/B,CAAC,gBAAM;IACR,OAAO,YAAK;MACV,IAAI;QACFC,KAAK,CAACC,eAAe,GAAGN,OAAO,CAACA,OAAO;OACxC,CAAC,iBAAM;IACV,CAAC;EACH,CAAC,EAAE,CAACD,KAAK,CAAC,CAAC;AACb;AAEA,SAAgBQ,mBAAmB;EACjC,IAAMC,QAAQ,GAAGP,eAAK,CAACC,MAAM,CAAC,KAAK,CAAC;EAEpCJ,kBAAkB,CAAC,EAAE,CAAC;EAEtBG,eAAK,CAACE,SAAS,CAAC,YAAK;IACnB,SAASM,gBAAgB,CAACC,EAAc;MACtCF,QAAQ,CAACR,OAAO,GAAG,IAAI;MAEvB,IAAMW,KAAK,GAAGD,EAAE,aAAFA,EAAE,uBAAFA,EAAE,CAAEC,KAAK;MACvB,IACE,CAACA,KAAK,IACN,EAAEA,KAAK,YAAYN,KAAK,CAAC,IACzB,OAAOM,KAAK,CAACC,KAAK,KAAK,QAAQ,EAC/B;QACA;;MAGFC,2BAAiB,CAACC,eAAe,CAACH,KAAK,CAAC;IAC1C;IAEA,SAASI,oBAAoB,CAACL,EAAyB;MACrDF,QAAQ,CAACR,OAAO,GAAG,IAAI;MAEvB,IAAMgB,MAAM,GAAGN,EAAE,aAAFA,EAAE,uBAAFA,EAAE,CAAEM,MAAM;MACzB,IACE,CAACA,MAAM,IACP,EAAEA,MAAM,YAAYX,KAAK,CAAC,IAC1B,OAAOW,MAAM,CAACJ,KAAK,KAAK,QAAQ,EAChC;QACA;;MAGFC,2BAAiB,CAACC,eAAe,CAACE,MAAM,CAAC;IAC3C;IAEAC,MAAM,CAACC,gBAAgB,CAAC,oBAAoB,EAAEH,oBAAoB,CAAC;IACnEE,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAET,gBAAgB,CAAC;IAClD,OAAO,YAAK;MACVQ,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEV,gBAAgB,CAAC;MACrDQ,MAAM,CAACE,mBAAmB,CAAC,oBAAoB,EAAEJ,oBAAoB,CAAC;IACxE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOP,QAAQ;AACjB;AA7CAY","names":["useStackTraceLimit","limit","current","react_1","useRef","useEffect","currentLimit","Error","stackTraceLimit","useRejectionHandler","hasError","onUnhandledError","ev","error","stack","ExceptionsManager_1","handleException","onUnhandledRejection","reason","window","addEventListener","removeEventListener","exports"],"sourceRoot":"","sources":["../../src/error-overlay/useRejectionHandler.ts"],"sourcesContent":["import React from \"react\";\n\nimport ExceptionsManager from \"./modules/ExceptionsManager\";\n\nfunction useStackTraceLimit(limit: number) {\n  const current = React.useRef(0);\n  React.useEffect(() => {\n    try {\n      const currentLimit = Error.stackTraceLimit;\n      Error.stackTraceLimit = limit;\n      current.current = currentLimit;\n    } catch {}\n    return () => {\n      try {\n        Error.stackTraceLimit = current.current;\n      } catch {}\n    };\n  }, [limit]);\n}\n\nexport function useRejectionHandler() {\n  const hasError = React.useRef(false);\n\n  useStackTraceLimit(35);\n\n  React.useEffect(() => {\n    function onUnhandledError(ev: ErrorEvent) {\n      hasError.current = true;\n\n      const error = ev?.error;\n      if (\n        !error ||\n        !(error instanceof Error) ||\n        typeof error.stack !== \"string\"\n      ) {\n        return;\n      }\n\n      ExceptionsManager.handleException(error);\n    }\n\n    function onUnhandledRejection(ev: PromiseRejectionEvent) {\n      hasError.current = true;\n\n      const reason = ev?.reason;\n      if (\n        !reason ||\n        !(reason instanceof Error) ||\n        typeof reason.stack !== \"string\"\n      ) {\n        return;\n      }\n\n      ExceptionsManager.handleException(reason);\n    }\n\n    window.addEventListener(\"unhandledrejection\", onUnhandledRejection);\n    window.addEventListener(\"error\", onUnhandledError);\n    return () => {\n      window.removeEventListener(\"error\", onUnhandledError);\n      window.removeEventListener(\"unhandledrejection\", onUnhandledRejection);\n    };\n  }, []);\n\n  return hasError;\n}\n"]},"metadata":{},"sourceType":"script"}