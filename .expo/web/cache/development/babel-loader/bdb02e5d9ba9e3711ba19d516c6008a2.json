{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrorToastMessage = void 0;\nvar react_views_1 = require(\"@bacons/react-views\");\nvar react_1 = __importDefault(require(\"react\"));\nvar LogBoxMessage_1 = require(\"../UI/LogBoxMessage\");\nvar LogBoxStyle = __importStar(require(\"../UI/LogBoxStyle\"));\nfunction ErrorToastMessage(_ref) {\n  var message = _ref.message;\n  return react_1.default.createElement(react_views_1.Text, {\n    numberOfLines: 1,\n    selectable: false,\n    style: styles.text\n  }, message && react_1.default.createElement(LogBoxMessage_1.LogBoxMessage, {\n    plaintext: true,\n    message: message,\n    style: styles.substitutionText\n  }));\n}\nexports.ErrorToastMessage = ErrorToastMessage;\nvar styles = react_views_1.StyleSheet.create({\n  text: {\n    paddingLeft: 8,\n    color: LogBoxStyle.getTextColor(1),\n    flex: 1,\n    fontSize: 14,\n    lineHeight: 22\n  },\n  substitutionText: {\n    color: LogBoxStyle.getTextColor(0.6)\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAEA,SAAgBA,iBAAiB,OAAuC;EAAA,IAApCC,OAAO,QAAPA,OAAO;EACzC,OACEC,8BAACC,kBAAI;IAACC,aAAa,EAAE,CAAC;IAAEC,UAAU,EAAE,KAAK;IAAEC,KAAK,EAAEC,MAAM,CAACC;EAAI,GAC1DP,OAAO,IACNC,8BAACO,6BAAa;IACZC,SAAS;IACTT,OAAO,EAAEA,OAAO;IAChBK,KAAK,EAAEC,MAAM,CAACI;EAAgB,EAEjC,CACI;AAEX;AAZAC;AAcA,IAAML,MAAM,GAAGJ,wBAAU,CAACU,MAAM,CAAC;EAC/BL,IAAI,EAAE;IACJM,WAAW,EAAE,CAAC;IACdC,KAAK,EAAEC,WAAW,CAACC,YAAY,CAAC,CAAC,CAAC;IAClCC,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;GACb;EACDT,gBAAgB,EAAE;IAChBI,KAAK,EAAEC,WAAW,CAACC,YAAY,CAAC,GAAG;;CAEtC,CAAC","names":["ErrorToastMessage","message","react_1","react_views_1","numberOfLines","selectable","style","styles","text","LogBoxMessage_1","plaintext","substitutionText","exports","create","paddingLeft","color","LogBoxStyle","getTextColor","flex","fontSize","lineHeight"],"sourceRoot":"","sources":["../../../src/error-overlay/toast/ErrorToastMessage.tsx"],"sourcesContent":["import { StyleSheet, Text } from \"@bacons/react-views\";\nimport React from \"react\";\n\nimport type { Message as MessageType } from \"../Data/parseLogBoxLog\";\nimport { LogBoxMessage } from \"../UI/LogBoxMessage\";\nimport * as LogBoxStyle from \"../UI/LogBoxStyle\";\n\nexport function ErrorToastMessage({ message }: { message?: MessageType }) {\n  return (\n    <Text numberOfLines={1} selectable={false} style={styles.text}>\n      {message && (\n        <LogBoxMessage\n          plaintext\n          message={message}\n          style={styles.substitutionText}\n        />\n      )}\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    paddingLeft: 8,\n    color: LogBoxStyle.getTextColor(1),\n    flex: 1,\n    fontSize: 14,\n    lineHeight: 22,\n  },\n  substitutionText: {\n    color: LogBoxStyle.getTextColor(0.6),\n  },\n});\n"]},"metadata":{},"sourceType":"script"}