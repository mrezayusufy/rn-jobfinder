{"ast":null,"code":"import React, { createContext, useContext, useMemo } from \"react\";\nimport { getRoutes } from \"./getRoutes\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var RootRouteNodeContext = createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  RootRouteNodeContext.displayName = \"RoutesContext\";\n}\nexport function useRootRouteNodeContext() {\n  var routes = useContext(RootRouteNodeContext);\n  if (!routes) {\n    throw new Error(\"useRootRouteNodeContext is being used outside of RootRouteNodeContext.Provider\");\n  }\n  return routes;\n}\n\nexport function RootRouteNodeProvider(_ref) {\n  var context = _ref.context,\n    children = _ref.children;\n  var keys = useMemo(function () {\n    return context.keys();\n  }, [context]);\n  var routes = useMemo(function () {\n    return getRoutes(context);\n  }, [keys]);\n  return _jsx(RootRouteNodeContext.Provider, {\n    value: routes,\n    children: children\n  });\n}","map":{"version":3,"names":["React","createContext","useContext","useMemo","getRoutes","RootRouteNodeContext","process","env","NODE_ENV","displayName","useRootRouteNodeContext","routes","Error","RootRouteNodeProvider","context","children","keys"],"sources":["C:/react-project/rn-jobs/node_modules/expo-router/src/useRootRouteNodeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useMemo } from \"react\";\n\nimport { RouteNode } from \"./Route\";\nimport { getRoutes } from \"./getRoutes\";\nimport { RequireContext } from \"./types\";\n\n// Routes context\nexport const RootRouteNodeContext = createContext<RouteNode | null>(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  RootRouteNodeContext.displayName = \"RoutesContext\";\n}\n\nexport function useRootRouteNodeContext() {\n  const routes = useContext(RootRouteNodeContext);\n  if (!routes) {\n    throw new Error(\n      \"useRootRouteNodeContext is being used outside of RootRouteNodeContext.Provider\"\n    );\n  }\n  return routes;\n}\n\n/** Provide the require context as normalized routes. */\nexport function RootRouteNodeProvider({\n  context,\n  children,\n}: {\n  context: RequireContext;\n  children: React.ReactNode;\n}) {\n  // TODO: Is this an optimal hook dependency?\n  const keys = useMemo(() => context.keys(), [context]);\n  const routes = useMemo(() => getRoutes(context), [keys]);\n  return (\n    <RootRouteNodeContext.Provider value={routes}>\n      {children}\n    </RootRouteNodeContext.Provider>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAGjE,SAASC,SAAS;AAAsB;AAIxC,OAAO,IAAMC,oBAAoB,GAAGJ,aAAa,CAAmB,IAAI,CAAC;AAEzE,IAAIK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCH,oBAAoB,CAACI,WAAW,GAAG,eAAe;AACpD;AAEA,OAAO,SAASC,uBAAuB,GAAG;EACxC,IAAMC,MAAM,GAAGT,UAAU,CAACG,oBAAoB,CAAC;EAC/C,IAAI,CAACM,MAAM,EAAE;IACX,MAAM,IAAIC,KAAK,CACb,gFAAgF,CACjF;EACH;EACA,OAAOD,MAAM;AACf;;AAGA,OAAO,SAASE,qBAAqB,OAMlC;EAAA,IALDC,OAAO,QAAPA,OAAO;IACPC,QAAQ,QAARA,QAAQ;EAMR,IAAMC,IAAI,GAAGb,OAAO,CAAC;IAAA,OAAMW,OAAO,CAACE,IAAI,EAAE;EAAA,GAAE,CAACF,OAAO,CAAC,CAAC;EACrD,IAAMH,MAAM,GAAGR,OAAO,CAAC;IAAA,OAAMC,SAAS,CAACU,OAAO,CAAC;EAAA,GAAE,CAACE,IAAI,CAAC,CAAC;EACxD,OACE,KAAC,oBAAoB,CAAC,QAAQ;IAAC,KAAK,EAAEL,MAAO;IAAA,UAC1CI;EAAQ,EACqB;AAEpC"},"metadata":{},"sourceType":"module"}