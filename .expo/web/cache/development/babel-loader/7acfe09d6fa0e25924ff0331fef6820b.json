{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseLogBoxLog = exports.parseLogBoxException = exports.parseComponentStack = exports.parseInterpolation = void 0;\nvar UTFSequence_1 = __importDefault(require(\"react-native/Libraries/UTFSequence\"));\nvar parseErrorStack_1 = __importDefault(require(\"../modules/parseErrorStack\"));\nvar stringifySafe_1 = __importDefault(require(\"../modules/stringifySafe\"));\nvar BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nvar BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*):? (?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?)(\\/(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*): ((?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+?)\\n([ >]{2}[\\t-\\r 0-9\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+ \\|(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+|\\x1B(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)/;\nvar METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) ((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*): ((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*) \\(([0-9]+):([0-9]+)\\)\\n\\n((?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)/;\nvar SUBSTITUTION = UTFSequence_1.default.BOM + \"%s\";\nfunction parseInterpolation(args) {\n  var categoryParts = [];\n  var contentParts = [];\n  var substitutionOffsets = [];\n  var remaining = _toConsumableArray(args);\n  if (typeof remaining[0] === \"string\") {\n    var formatString = String(remaining.shift());\n    var formatStringParts = formatString.split(\"%s\");\n    var substitutionCount = formatStringParts.length - 1;\n    var substitutions = remaining.splice(0, substitutionCount);\n    var categoryString = \"\";\n    var contentString = \"\";\n    var substitutionIndex = 0;\n    for (var formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          var substitution = typeof substitutions[substitutionIndex] === \"string\" ? substitutions[substitutionIndex] : (0, stringifySafe_1.default)(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length\n          });\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length\n          });\n          categoryString += \"%s\";\n          contentString += \"%s\";\n        }\n        substitutionIndex++;\n      }\n    }\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n  var remainingArgs = remaining.map(function (arg) {\n    return typeof arg === \"string\" ? arg : (0, stringifySafe_1.default)(arg);\n  });\n  categoryParts.push.apply(categoryParts, _toConsumableArray(remainingArgs));\n  contentParts.push.apply(contentParts, _toConsumableArray(remainingArgs));\n  return {\n    category: categoryParts.join(\" \"),\n    message: {\n      content: contentParts.join(\" \"),\n      substitutions: substitutionOffsets\n    }\n  };\n}\nexports.parseInterpolation = parseInterpolation;\nfunction isComponentStack(consoleArgument) {\n  var isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  var isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  var isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n  return isOldComponentStackFormat || isNewComponentStackFormat || isNewJSCComponentStackFormat;\n}\nfunction parseComponentStack(message) {\n  var stack = (0, parseErrorStack_1.default)(message);\n  if (stack && stack.length > 0) {\n    return stack.map(function (frame) {\n      return {\n        content: frame.methodName,\n        collapse: frame.collapse || false,\n        fileName: frame.file == null ? \"unknown\" : frame.file,\n        location: {\n          column: frame.column == null ? -1 : frame.column,\n          row: frame.lineNumber == null ? -1 : frame.lineNumber\n        }\n      };\n    });\n  }\n  return message.split(/\\n {4}in /g).map(function (s) {\n    if (!s) {\n      return null;\n    }\n    var match = s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);\n    if (!match) {\n      return null;\n    }\n    var _match$slice = match.slice(1),\n      _match$slice2 = _slicedToArray(_match$slice, 3),\n      content = _match$slice2[0],\n      fileName = _match$slice2[1],\n      row = _match$slice2[2];\n    return {\n      content: content,\n      fileName: fileName,\n      location: {\n        column: -1,\n        row: parseInt(row, 10)\n      }\n    };\n  }).filter(Boolean);\n}\nexports.parseComponentStack = parseComponentStack;\nfunction parseLogBoxException(error) {\n  var message = error.originalMessage != null ? error.originalMessage : \"Unknown\";\n  var metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    var _metroInternalError$s = metroInternalError.slice(1),\n      _metroInternalError$s2 = _slicedToArray(_metroInternalError$s, 5),\n      content = _metroInternalError$s2[0],\n      fileName = _metroInternalError$s2[1],\n      row = _metroInternalError$s2[2],\n      column = _metroInternalError$s2[3],\n      codeFrame = _metroInternalError$s2[4];\n    return {\n      level: \"fatal\",\n      type: \"Metro Error\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName: fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10)\n        },\n        content: codeFrame\n      },\n      message: {\n        content: content,\n        substitutions: []\n      },\n      category: fileName + \"-\" + row + \"-\" + column\n    };\n  }\n  var babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    var _babelTransformError$ = babelTransformError.slice(1),\n      _babelTransformError$2 = _slicedToArray(_babelTransformError$, 5),\n      _fileName = _babelTransformError$2[0],\n      _content = _babelTransformError$2[1],\n      _row = _babelTransformError$2[2],\n      _column = _babelTransformError$2[3],\n      _codeFrame = _babelTransformError$2[4];\n    return {\n      level: \"syntax\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName: _fileName,\n        location: {\n          row: parseInt(_row, 10),\n          column: parseInt(_column, 10)\n        },\n        content: _codeFrame\n      },\n      message: {\n        content: _content,\n        substitutions: []\n      },\n      category: _fileName + \"-\" + _row + \"-\" + _column\n    };\n  }\n  var babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n  if (babelCodeFrameError) {\n    var _babelCodeFrameError$ = babelCodeFrameError.slice(1),\n      _babelCodeFrameError$2 = _slicedToArray(_babelCodeFrameError$, 3),\n      _fileName2 = _babelCodeFrameError$2[0],\n      _content2 = _babelCodeFrameError$2[1],\n      _codeFrame2 = _babelCodeFrameError$2[2];\n    return {\n      level: \"syntax\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName: _fileName2,\n        location: null,\n        content: _codeFrame2\n      },\n      message: {\n        content: _content2,\n        substitutions: []\n      },\n      category: _fileName2 + \"-\" + 1 + \"-\" + 1\n    };\n  }\n  if (message.match(/^TransformError /)) {\n    return {\n      level: \"syntax\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: []\n      },\n      category: message\n    };\n  }\n  var componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return _objectSpread({\n      level: \"fatal\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: componentStack != null ? parseComponentStack(componentStack) : []\n    }, parseInterpolation([message]));\n  }\n  if (componentStack != null) {\n    return _objectSpread({\n      level: \"error\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack)\n    }, parseInterpolation([message]));\n  }\n  return _objectSpread({\n    level: \"error\",\n    stack: error.stack,\n    isComponentError: error.isComponentError\n  }, parseLogBoxLog([message]));\n}\nexports.parseLogBoxException = parseLogBoxException;\nfunction parseLogBoxLog(args) {\n  var message = args[0];\n  var argsWithoutComponentStack = [];\n  var componentStack = [];\n  if (typeof message === \"string\" && message.slice(-2) === \"%s\" && args.length > 0) {\n    var lastArg = args[args.length - 1];\n    if (typeof lastArg === \"string\" && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n  if (componentStack.length === 0) {\n    for (var arg of args) {\n      if (typeof arg === \"string\" && isComponentStack(arg)) {\n        var messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n  return _objectSpread(_objectSpread({}, parseInterpolation(argsWithoutComponentStack)), {}, {\n    componentStack: componentStack\n  });\n}\nexports.parseLogBoxLog = parseLogBoxLog;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AASA;AAGA;AACA;AAGA,IAAMA,4BAA4B,GAChC,gGAAgG;AAClG,IAAMC,6BAA6B,GACjC,k/BAAsG;AACxG,IAAMC,kBAAkB,GACtB,0hBAA6F;AAgC/F,IAAMC,YAAY,GAAGC,qBAAW,CAACC,GAAG,GAAG,IAAI;AAE3C,SAAgBC,kBAAkB,CAACC,IAAoB;EAIrD,IAAMC,aAAa,GAAa,EAAE;EAClC,IAAMC,YAAY,GAAa,EAAE;EACjC,IAAMC,mBAAmB,GAAyC,EAAE;EAEpE,IAAMC,SAAS,sBAAOJ,IAAI,CAAC;EAC3B,IAAI,OAAOI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IACpC,IAAMC,YAAY,GAAGC,MAAM,CAACF,SAAS,CAACG,KAAK,EAAE,CAAC;IAC9C,IAAMC,iBAAiB,GAAGH,YAAY,CAACI,KAAK,CAAC,IAAI,CAAC;IAClD,IAAMC,iBAAiB,GAAGF,iBAAiB,CAACG,MAAM,GAAG,CAAC;IACtD,IAAMC,aAAa,GAAGR,SAAS,CAACS,MAAM,CAAC,CAAC,EAAEH,iBAAiB,CAAC;IAE5D,IAAII,cAAc,GAAG,EAAE;IACvB,IAAIC,aAAa,GAAG,EAAE;IAEtB,IAAIC,iBAAiB,GAAG,CAAC;IACzB,KAAK,IAAMC,gBAAgB,IAAIT,iBAAiB,EAAE;MAChDM,cAAc,IAAIG,gBAAgB;MAClCF,aAAa,IAAIE,gBAAgB;MAEjC,IAAID,iBAAiB,GAAGN,iBAAiB,EAAE;QACzC,IAAIM,iBAAiB,GAAGJ,aAAa,CAACD,MAAM,EAAE;UAI5C,IAAMO,YAAY,GAChB,OAAON,aAAa,CAACI,iBAAiB,CAAC,KAAK,QAAQ,GAChDJ,aAAa,CAACI,iBAAiB,CAAC,GAChC,2BAAa,EAACJ,aAAa,CAACI,iBAAiB,CAAC,CAAC;UACrDb,mBAAmB,CAACgB,IAAI,CAAC;YACvBR,MAAM,EAAEO,YAAY,CAACP,MAAM;YAC3BS,MAAM,EAAEL,aAAa,CAACJ;WACvB,CAAC;UAEFG,cAAc,IAAIlB,YAAY;UAC9BmB,aAAa,IAAIG,YAAY;SAC9B,MAAM;UACLf,mBAAmB,CAACgB,IAAI,CAAC;YACvBR,MAAM,EAAE,CAAC;YACTS,MAAM,EAAEL,aAAa,CAACJ;WACvB,CAAC;UAEFG,cAAc,IAAI,IAAI;UACtBC,aAAa,IAAI,IAAI;;QAGvBC,iBAAiB,EAAE;;;IAIvBf,aAAa,CAACkB,IAAI,CAACL,cAAc,CAAC;IAClCZ,YAAY,CAACiB,IAAI,CAACJ,aAAa,CAAC;;EAGlC,IAAMM,aAAa,GAAGjB,SAAS,CAACkB,GAAG,CAAC,UAACC,GAAG,EAAI;IAI1C,OAAO,OAAOA,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAG,2BAAa,EAACA,GAAG,CAAC;EAC3D,CAAC,CAAC;EACFtB,aAAa,CAACkB,IAAI,OAAlBlB,aAAa,qBAASoB,aAAa,EAAC;EACpCnB,YAAY,CAACiB,IAAI,OAAjBjB,YAAY,qBAASmB,aAAa,EAAC;EAEnC,OAAO;IACLG,QAAQ,EAAEvB,aAAa,CAACwB,IAAI,CAAC,GAAG,CAAC;IACjCC,OAAO,EAAE;MACPC,OAAO,EAAEzB,YAAY,CAACuB,IAAI,CAAC,GAAG,CAAC;MAC/Bb,aAAa,EAAET;;GAElB;AACH;AAzEAyB;AA2EA,SAASC,gBAAgB,CAACC,eAAuB;EAC/C,IAAMC,yBAAyB,GAAG,QAAQ,CAACC,IAAI,CAACF,eAAe,CAAC;EAChE,IAAMG,yBAAyB,GAAG,QAAQ,CAACD,IAAI,CAACF,eAAe,CAAC;EAChE,IAAMI,4BAA4B,GAAG,OAAO,CAACF,IAAI,CAACF,eAAe,CAAC;EAElE,OACEC,yBAAyB,IACzBE,yBAAyB,IACzBC,4BAA4B;AAEhC;AAEA,SAAgBC,mBAAmB,CAACT,OAAe;EAIjD,IAAMU,KAAK,GAAG,6BAAe,EAACV,OAAO,CAAC;EACtC,IAAIU,KAAK,IAAIA,KAAK,CAACzB,MAAM,GAAG,CAAC,EAAE;IAC7B,OAAOyB,KAAK,CAACd,GAAG,CAAC,UAACe,KAAK;MAAA,OAAM;QAC3BV,OAAO,EAAEU,KAAK,CAACC,UAAU;QACzBC,QAAQ,EAAEF,KAAK,CAACE,QAAQ,IAAI,KAAK;QACjCC,QAAQ,EAAEH,KAAK,CAACI,IAAI,IAAI,IAAI,GAAG,SAAS,GAAGJ,KAAK,CAACI,IAAI;QACrDC,QAAQ,EAAE;UACRC,MAAM,EAAEN,KAAK,CAACM,MAAM,IAAI,IAAI,GAAG,CAAC,CAAC,GAAGN,KAAK,CAACM,MAAM;UAChDC,GAAG,EAAEP,KAAK,CAACQ,UAAU,IAAI,IAAI,GAAG,CAAC,CAAC,GAAGR,KAAK,CAACQ;;OAE9C;IAAA,CAAC,CAAC;;EAGL,OAAOnB,OAAO,CACXjB,KAAK,CAAC,YAAY,CAAC,CACnBa,GAAG,CAAC,UAACwB,CAAC,EAAI;IACT,IAAI,CAACA,CAAC,EAAE;MACN,OAAO,IAAI;;IAEb,IAAMC,KAAK,GAAGD,CAAC,CAACC,KAAK,CAAC,8BAA8B,CAAC;IACrD,IAAI,CAACA,KAAK,EAAE;MACV,OAAO,IAAI;;IAGb,mBAAiCA,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC;MAAA;MAAxCrB,OAAO;MAAEa,QAAQ;MAAEI,GAAG;IAC7B,OAAO;MACLjB,OAAO,EAAPA,OAAO;MACPa,QAAQ,EAARA,QAAQ;MACRE,QAAQ,EAAE;QAAEC,MAAM,EAAE,CAAC,CAAC;QAAEC,GAAG,EAAEK,QAAQ,CAACL,GAAG,EAAE,EAAE;MAAC;KAC/C;EACH,CAAC,CAAC,CACDM,MAAM,CAACC,OAAO,CAAmB;AACtC;AApCAvB;AAsCA,SAAgBwB,oBAAoB,CAClCC,KAA4B;EAE5B,IAAM3B,OAAO,GACX2B,KAAK,CAACC,eAAe,IAAI,IAAI,GAAGD,KAAK,CAACC,eAAe,GAAG,SAAS;EAEnE,IAAMC,kBAAkB,GAAG7B,OAAO,CAACqB,KAAK,CAACpD,kBAAkB,CAAC;EAC5D,IAAI4D,kBAAkB,EAAE;IACtB,4BACEA,kBAAkB,CAACP,KAAK,CAAC,CAAC,CAAC;MAAA;MADtBrB,OAAO;MAAEa,QAAQ;MAAEI,GAAG;MAAED,MAAM;MAAEa,SAAS;IAGhD,OAAO;MACLC,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE,aAAa;MACnBtB,KAAK,EAAE,EAAE;MACTuB,gBAAgB,EAAE,KAAK;MACvBC,cAAc,EAAE,EAAE;MAClBJ,SAAS,EAAE;QACThB,QAAQ,EAARA,QAAQ;QACRE,QAAQ,EAAE;UACRE,GAAG,EAAEK,QAAQ,CAACL,GAAG,EAAE,EAAE,CAAC;UACtBD,MAAM,EAAEM,QAAQ,CAACN,MAAM,EAAE,EAAE;SAC5B;QACDhB,OAAO,EAAE6B;OACV;MACD9B,OAAO,EAAE;QACPC,OAAO,EAAPA,OAAO;QACPf,aAAa,EAAE;OAChB;MACDY,QAAQ,EAAKgB,QAAQ,SAAII,GAAG,SAAID;KACjC;;EAGH,IAAMkB,mBAAmB,GAAGnC,OAAO,CAACqB,KAAK,CAACtD,4BAA4B,CAAC;EACvE,IAAIoE,mBAAmB,EAAE;IAEvB,4BACEA,mBAAmB,CAACb,KAAK,CAAC,CAAC,CAAC;MAAA;MADvBR,SAAQ;MAAEb,QAAO;MAAEiB,IAAG;MAAED,OAAM;MAAEa,UAAS;IAGhD,OAAO;MACLC,KAAK,EAAE,QAAQ;MACfrB,KAAK,EAAE,EAAE;MACTuB,gBAAgB,EAAE,KAAK;MACvBC,cAAc,EAAE,EAAE;MAClBJ,SAAS,EAAE;QACThB,QAAQ,EAARA,SAAQ;QACRE,QAAQ,EAAE;UACRE,GAAG,EAAEK,QAAQ,CAACL,IAAG,EAAE,EAAE,CAAC;UACtBD,MAAM,EAAEM,QAAQ,CAACN,OAAM,EAAE,EAAE;SAC5B;QACDhB,OAAO,EAAE6B;OACV;MACD9B,OAAO,EAAE;QACPC,OAAO,EAAPA,QAAO;QACPf,aAAa,EAAE;OAChB;MACDY,QAAQ,EAAKgB,SAAQ,SAAII,IAAG,SAAID;KACjC;;EAGH,IAAMmB,mBAAmB,GAAGpC,OAAO,CAACqB,KAAK,CAACrD,6BAA6B,CAAC;EAExE,IAAIoE,mBAAmB,EAAE;IAEvB,4BAAuCA,mBAAmB,CAACd,KAAK,CAAC,CAAC,CAAC;MAAA;MAA5DR,UAAQ;MAAEb,SAAO;MAAE6B,WAAS;IACnC,OAAO;MACLC,KAAK,EAAE,QAAQ;MACfrB,KAAK,EAAE,EAAE;MACTuB,gBAAgB,EAAE,KAAK;MACvBC,cAAc,EAAE,EAAE;MAClBJ,SAAS,EAAE;QACThB,QAAQ,EAARA,UAAQ;QACRE,QAAQ,EAAE,IAAI;QACdf,OAAO,EAAE6B;OACV;MACD9B,OAAO,EAAE;QACPC,OAAO,EAAPA,SAAO;QACPf,aAAa,EAAE;OAChB;MACDY,QAAQ,EAAKgB,UAAQ,SAAI,CAAC,SAAI;KAC/B;;EAGH,IAAId,OAAO,CAACqB,KAAK,CAAC,kBAAkB,CAAC,EAAE;IACrC,OAAO;MACLU,KAAK,EAAE,QAAQ;MACfrB,KAAK,EAAEiB,KAAK,CAACjB,KAAK;MAClBuB,gBAAgB,EAAEN,KAAK,CAACM,gBAAgB;MACxCC,cAAc,EAAE,EAAE;MAClBlC,OAAO,EAAE;QACPC,OAAO,EAAED,OAAO;QAChBd,aAAa,EAAE;OAChB;MACDY,QAAQ,EAAEE;KACX;;EAGH,IAAMkC,cAAc,GAAGP,KAAK,CAACO,cAAc;EAC3C,IAAIP,KAAK,CAACU,OAAO,IAAIV,KAAK,CAACM,gBAAgB,EAAE;IAC3C;MACEF,KAAK,EAAE,OAAO;MACdrB,KAAK,EAAEiB,KAAK,CAACjB,KAAK;MAClBuB,gBAAgB,EAAEN,KAAK,CAACM,gBAAgB;MACxCC,cAAc,EACZA,cAAc,IAAI,IAAI,GAAGzB,mBAAmB,CAACyB,cAAc,CAAC,GAAG;IAAE,GAChE7D,kBAAkB,CAAC,CAAC2B,OAAO,CAAC,CAAC;;EAIpC,IAAIkC,cAAc,IAAI,IAAI,EAAE;IAE1B;MACEH,KAAK,EAAE,OAAO;MACdrB,KAAK,EAAEiB,KAAK,CAACjB,KAAK;MAClBuB,gBAAgB,EAAEN,KAAK,CAACM,gBAAgB;MACxCC,cAAc,EAAEzB,mBAAmB,CAACyB,cAAc;IAAC,GAChD7D,kBAAkB,CAAC,CAAC2B,OAAO,CAAC,CAAC;;EAMpC;IACE+B,KAAK,EAAE,OAAO;IACdrB,KAAK,EAAEiB,KAAK,CAACjB,KAAK;IAClBuB,gBAAgB,EAAEN,KAAK,CAACM;EAAgB,GACrCK,cAAc,CAAC,CAACtC,OAAO,CAAC,CAAC;AAEhC;AAhIAE;AAkIA,SAAgBoC,cAAc,CAAChE,IAAoB;EAKjD,IAAM0B,OAAO,GAAG1B,IAAI,CAAC,CAAC,CAAC;EACvB,IAAIiE,yBAAyB,GAAU,EAAE;EACzC,IAAIL,cAAc,GAAmB,EAAE;EAGvC,IACE,OAAOlC,OAAO,KAAK,QAAQ,IAC3BA,OAAO,CAACsB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAC1BhD,IAAI,CAACW,MAAM,GAAG,CAAC,EACf;IACA,IAAMuD,OAAO,GAAGlE,IAAI,CAACA,IAAI,CAACW,MAAM,GAAG,CAAC,CAAC;IACrC,IAAI,OAAOuD,OAAO,KAAK,QAAQ,IAAIrC,gBAAgB,CAACqC,OAAO,CAAC,EAAE;MAC5DD,yBAAyB,GAAGjE,IAAI,CAACgD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC7CiB,yBAAyB,CAAC,CAAC,CAAC,GAAGvC,OAAO,CAACsB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACnDY,cAAc,GAAGzB,mBAAmB,CAAC+B,OAAO,CAAC;;;EAIjD,IAAIN,cAAc,CAACjD,MAAM,KAAK,CAAC,EAAE;IAE/B,KAAK,IAAMY,GAAG,IAAIvB,IAAI,EAAE;MACtB,IAAI,OAAOuB,GAAG,KAAK,QAAQ,IAAIM,gBAAgB,CAACN,GAAG,CAAC,EAAE;QAEpD,IAAI4C,eAAe,GAAG5C,GAAG,CAAC6C,MAAM,CAAC,gBAAgB,CAAC;QAClD,IAAID,eAAe,GAAG,CAAC,EAAE;UAEvBA,eAAe,GAAG5C,GAAG,CAAC6C,MAAM,CAAC,IAAI,CAAC;;QAEpC,IAAID,eAAe,GAAG,CAAC,EAAE;UACvBF,yBAAyB,CAAC9C,IAAI,CAACI,GAAG,CAACyB,KAAK,CAAC,CAAC,EAAEmB,eAAe,CAAC,CAAC;;QAG/DP,cAAc,GAAGzB,mBAAmB,CAACZ,GAAG,CAAC;OAC1C,MAAM;QACL0C,yBAAyB,CAAC9C,IAAI,CAACI,GAAG,CAAC;;;;EAKzC,uCACKxB,kBAAkB,CAACkE,yBAAyB,CAAC;IAChDL,cAAc,EAAdA;EAAc;AAElB;AAhDAhC","names":["BABEL_TRANSFORM_ERROR_FORMAT","BABEL_CODE_FRAME_ERROR_FORMAT","METRO_ERROR_FORMAT","SUBSTITUTION","UTFSequence_1","BOM","parseInterpolation","args","categoryParts","contentParts","substitutionOffsets","remaining","formatString","String","shift","formatStringParts","split","substitutionCount","length","substitutions","splice","categoryString","contentString","substitutionIndex","formatStringPart","substitution","push","offset","remainingArgs","map","arg","category","join","message","content","exports","isComponentStack","consoleArgument","isOldComponentStackFormat","test","isNewComponentStackFormat","isNewJSCComponentStackFormat","parseComponentStack","stack","frame","methodName","collapse","fileName","file","location","column","row","lineNumber","s","match","slice","parseInt","filter","Boolean","parseLogBoxException","error","originalMessage","metroInternalError","codeFrame","level","type","isComponentError","componentStack","babelTransformError","babelCodeFrameError","isFatal","parseLogBoxLog","argsWithoutComponentStack","lastArg","messageEndIndex","search"],"sourceRoot":"","sources":["../../../src/error-overlay/Data/parseLogBoxLog.tsx"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-expect-error\nimport UTFSequence from \"react-native/Libraries/UTFSequence\";\n\nimport type { LogBoxLogData } from \"./LogBoxLog\";\nimport parseErrorStack from \"../modules/parseErrorStack\";\nimport stringifySafe from \"../modules/stringifySafe\";\ntype ExceptionData = any;\n\nconst BABEL_TRANSFORM_ERROR_FORMAT =\n  /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nconst BABEL_CODE_FRAME_ERROR_FORMAT =\n  /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\nconst METRO_ERROR_FORMAT =\n  /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\n\nexport type ExtendedExceptionData = ExceptionData & {\n  isComponentError: boolean;\n  [key: string]: any;\n};\nexport type Category = string;\nexport type CodeFrame = {\n  content: string;\n  location?: {\n    row: number;\n    column: number;\n    [key: string]: any;\n  } | null;\n  fileName: string;\n\n  // TODO: When React switched to using call stack frames,\n  // we gained the ability to use the collapse flag, but\n  // it is not integrated into the LogBox UI.\n  collapse?: boolean;\n};\n\nexport type Message = {\n  content: string;\n  substitutions: {\n    length: number;\n    offset: number;\n  }[];\n};\n\nexport type ComponentStack = CodeFrame[];\n\nconst SUBSTITUTION = UTFSequence.BOM + \"%s\";\n\nexport function parseInterpolation(args: readonly any[]): {\n  category: Category;\n  message: Message;\n} {\n  const categoryParts: string[] = [];\n  const contentParts: string[] = [];\n  const substitutionOffsets: { length: number; offset: number }[] = [];\n\n  const remaining = [...args];\n  if (typeof remaining[0] === \"string\") {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split(\"%s\");\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n\n    let categoryString = \"\";\n    let contentString = \"\";\n\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          // Don't stringify a string type.\n          // It adds quotation mark wrappers around the string,\n          // which causes the LogBox to look odd.\n          const substitution =\n            typeof substitutions[substitutionIndex] === \"string\"\n              ? substitutions[substitutionIndex]\n              : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length,\n          });\n\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length,\n          });\n\n          categoryString += \"%s\";\n          contentString += \"%s\";\n        }\n\n        substitutionIndex++;\n      }\n    }\n\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n\n  const remainingArgs = remaining.map((arg) => {\n    // Don't stringify a string type.\n    // It adds quotation mark wrappers around the string,\n    // which causes the LogBox to look odd.\n    return typeof arg === \"string\" ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n\n  return {\n    category: categoryParts.join(\" \"),\n    message: {\n      content: contentParts.join(\" \"),\n      substitutions: substitutionOffsets,\n    },\n  };\n}\n\nfunction isComponentStack(consoleArgument: string) {\n  const isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  const isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  const isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n\n  return (\n    isOldComponentStackFormat ||\n    isNewComponentStackFormat ||\n    isNewJSCComponentStackFormat\n  );\n}\n\nexport function parseComponentStack(message: string): ComponentStack {\n  // In newer versions of React, the component stack is formatted as a call stack frame.\n  // First try to parse the component stack as a call stack frame, and if that doesn't\n  // work then we'll fallback to the old custom component stack format parsing.\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return stack.map((frame) => ({\n      content: frame.methodName,\n      collapse: frame.collapse || false,\n      fileName: frame.file == null ? \"unknown\" : frame.file,\n      location: {\n        column: frame.column == null ? -1 : frame.column,\n        row: frame.lineNumber == null ? -1 : frame.lineNumber,\n      },\n    }));\n  }\n\n  return message\n    .split(/\\n {4}in /g)\n    .map((s) => {\n      if (!s) {\n        return null;\n      }\n      const match = s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);\n      if (!match) {\n        return null;\n      }\n\n      const [content, fileName, row] = match.slice(1);\n      return {\n        content,\n        fileName,\n        location: { column: -1, row: parseInt(row, 10) },\n      };\n    })\n    .filter(Boolean) as ComponentStack;\n}\n\nexport function parseLogBoxException(\n  error: ExtendedExceptionData\n): LogBoxLogData {\n  const message =\n    error.originalMessage != null ? error.originalMessage : \"Unknown\";\n\n  const metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [content, fileName, row, column, codeFrame] =\n      metroInternalError.slice(1);\n\n    return {\n      level: \"fatal\",\n      type: \"Metro Error\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    // Transform errors are thrown from inside the Babel transformer.\n    const [fileName, content, row, column, codeFrame] =\n      babelTransformError.slice(1);\n\n    return {\n      level: \"syntax\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n\n  if (babelCodeFrameError) {\n    // Codeframe errors are thrown from any use of buildCodeFrameError.\n    const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n    return {\n      level: \"syntax\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: null, // We are not given the location.\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${1}-${1}`,\n    };\n  }\n\n  if (message.match(/^TransformError /)) {\n    return {\n      level: \"syntax\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: [],\n      },\n      category: message,\n    };\n  }\n\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return {\n      level: \"fatal\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack:\n        componentStack != null ? parseComponentStack(componentStack) : [],\n      ...parseInterpolation([message]),\n    };\n  }\n\n  if (componentStack != null) {\n    // It is possible that console errors have a componentStack.\n    return {\n      level: \"error\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack),\n      ...parseInterpolation([message]),\n    };\n  }\n\n  // Most `console.error` calls won't have a componentStack. We parse them like\n  // regular logs which have the component stack burried in the message.\n  return {\n    level: \"error\",\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    ...parseLogBoxLog([message]),\n  };\n}\n\nexport function parseLogBoxLog(args: readonly any[]): {\n  componentStack: ComponentStack;\n  category: Category;\n  message: Message;\n} {\n  const message = args[0];\n  let argsWithoutComponentStack: any[] = [];\n  let componentStack: ComponentStack = [];\n\n  // Extract component stack from warnings like \"Some warning%s\".\n  if (\n    typeof message === \"string\" &&\n    message.slice(-2) === \"%s\" &&\n    args.length > 0\n  ) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === \"string\" && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n\n  if (componentStack.length === 0) {\n    // Try finding the component stack elsewhere.\n    for (const arg of args) {\n      if (typeof arg === \"string\" && isComponentStack(arg)) {\n        // Strip out any messages before the component stack.\n        let messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          // Handle JSC component stacks.\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n\n  return {\n    ...parseInterpolation(argsWithoutComponentStack),\n    componentStack,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}