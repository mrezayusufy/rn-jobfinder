{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Constants, { ExecutionEnvironment } from \"expo-constants\";\nimport * as Linking from \"expo-linking\";\nimport URL from \"url-parse\";\n\nfunction extractExactPathFromURL(url) {\n  if (\n  url.match(/^https?:\\/\\//)) {\n    var _URL = new URL(url),\n      origin = _URL.origin,\n      href = _URL.href;\n    return href.replace(origin, \"\");\n  }\n\n  if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient &&\n  url.match(/^exp(s)?:\\/\\//)) {\n    var _url$match;\n    var pathname = (_url$match = url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)) == null ? void 0 : _url$match[1];\n    if (pathname) {\n      return fromDeepLink(\"a://\" + pathname);\n    }\n    var res = Linking.parse(url);\n    var qs = !res.queryParams ? \"\" : Object.entries(res.queryParams).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n      return k + \"=\" + v;\n    }).join(\"&\");\n    return adjustPathname({\n      hostname: res.hostname,\n      pathname: res.path || \"\"\n    }) + (qs ? \"?\" + qs : \"\");\n  }\n\n  return fromDeepLink(url);\n}\n\nfunction isExpoDevelopmentClient(url) {\n  return !!url.hostname.match(/^expo-development-client$/);\n}\nfunction fromDeepLink(url) {\n  var res = new URL(url, true);\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.query || !res.query.url) {\n      return \"\";\n    }\n    var incomingUrl = res.query.url;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n  var qs = !res.query ? \"\" : Object.entries(res.query).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      k = _ref4[0],\n      v = _ref4[1];\n    return k + \"=\" + decodeURIComponent(v);\n  }).join(\"&\");\n  var results = \"\";\n  if (res.host) {\n    results += res.host;\n  }\n  if (res.pathname) {\n    results += res.pathname;\n  }\n  if (qs) {\n    results += \"?\" + qs;\n  }\n  return results;\n}\nexport function extractExpoPathFromURL(url) {\n  return extractExactPathFromURL(url).replace(/^\\//, \"\");\n}\nexport function adjustPathname(url) {\n  if (url.hostname === \"exp.host\" || url.hostname === \"u.expo.dev\") {\n    return url.pathname.split(\"/\").slice(2).join(\"/\");\n  }\n  return url.pathname;\n}","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","URL","extractExactPathFromURL","url","match","origin","href","replace","executionEnvironment","StoreClient","pathname","fromDeepLink","res","parse","qs","queryParams","Object","entries","map","k","v","join","adjustPathname","hostname","path","isExpoDevelopmentClient","query","incomingUrl","decodeURI","decodeURIComponent","results","host","extractExpoPathFromURL","split","slice"],"sources":["C:/react-project/rn-jobs/node_modules/expo-router/src/fork/extractPathFromURL.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from \"expo-constants\";\nimport * as Linking from \"expo-linking\";\nimport URL from \"url-parse\";\n\n// This is only run on native.\nfunction extractExactPathFromURL(url: string): string {\n  if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)\n  ) {\n    const { origin, href } = new URL(url);\n    return href.replace(origin, \"\");\n  }\n\n  // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n  if (\n    Constants.executionEnvironment === ExecutionEnvironment.StoreClient &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)\n  ) {\n    const pathname = url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1];\n    if (pathname) {\n      return fromDeepLink(\"a://\" + pathname);\n    }\n\n    const res = Linking.parse(url);\n\n    const qs = !res.queryParams\n      ? \"\"\n      : Object.entries(res.queryParams)\n          .map(([k, v]) => `${k}=${v}`)\n          .join(\"&\");\n    return (\n      adjustPathname({ hostname: res.hostname, pathname: res.path || \"\" }) +\n      (qs ? \"?\" + qs : \"\")\n    );\n  }\n\n  // TODO: Support dev client URLs\n\n  return fromDeepLink(url);\n}\n\n/** Major hack to support the makeshift expo-development-client system. */\nfunction isExpoDevelopmentClient(\n  url: URL<Record<string, string | undefined>>\n): boolean {\n  return !!url.hostname.match(/^expo-development-client$/);\n}\n\nfunction fromDeepLink(url: string): string {\n  // This is for all standard deep links, e.g. `foobar://` where everything\n  // after the `://` is the path.\n  const res = new URL(url, true);\n\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.query || !res.query.url) {\n      return \"\";\n    }\n    const incomingUrl = res.query.url;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n\n  const qs = !res.query\n    ? \"\"\n    : Object.entries(res.query as Record<string, string>)\n        .map(([k, v]) => `${k}=${decodeURIComponent(v)}`)\n        .join(\"&\");\n\n  let results = \"\";\n\n  if (res.host) {\n    results += res.host;\n  }\n\n  if (res.pathname) {\n    results += res.pathname;\n  }\n\n  if (qs) {\n    results += \"?\" + qs;\n  }\n\n  return results;\n}\n\nexport function extractExpoPathFromURL(url: string) {\n  // TODO: We should get rid of this, dropping specificities is not good\n  return extractExactPathFromURL(url).replace(/^\\//, \"\");\n}\n\nexport function adjustPathname(url: {\n  hostname?: string | null;\n  pathname: string;\n}) {\n  if (url.hostname === \"exp.host\" || url.hostname === \"u.expo.dev\") {\n    // drop the first two segments from pathname:\n    return url.pathname.split(\"/\").slice(2).join(\"/\");\n  }\n  return url.pathname;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}