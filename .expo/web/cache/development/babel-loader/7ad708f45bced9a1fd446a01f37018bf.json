{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogBoxMessage = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar cleanContent = function cleanContent(content) {\n  return content.replace(/^(TransformError |Warning: (Warning: )?|Error: )/g, \"\");\n};\nfunction LogBoxMessage(props) {\n  var _props$message = props.message,\n    content = _props$message.content,\n    substitutions = _props$message.substitutions;\n  if (props.plaintext === true) {\n    return react_1.default.createElement(react_native_1.Text, null, cleanContent(content));\n  }\n  var maxLength = props.maxLength != null ? props.maxLength : Infinity;\n  var substitutionStyle = props.style;\n  var elements = [];\n  var length = 0;\n  var createUnderLength = function createUnderLength(key, message, style) {\n    var cleanMessage = cleanContent(message);\n    if (props.maxLength != null) {\n      cleanMessage = cleanMessage.slice(0, props.maxLength - length);\n    }\n    if (length < maxLength) {\n      elements.push(react_1.default.createElement(react_native_1.Text, {\n        key: key,\n        style: style\n      }, cleanMessage));\n    }\n    length += cleanMessage.length;\n  };\n  var lastOffset = substitutions.reduce(function (prevOffset, substitution, index) {\n    var key = String(index);\n    if (substitution.offset > prevOffset) {\n      var prevPart = content.substr(prevOffset, substitution.offset - prevOffset);\n      createUnderLength(key, prevPart);\n    }\n    var substititionPart = content.substr(substitution.offset, substitution.length);\n    createUnderLength(key + \".5\", substititionPart, substitutionStyle);\n    return substitution.offset + substitution.length;\n  }, 0);\n  if (lastOffset < content.length) {\n    var lastPart = content.substr(lastOffset);\n    createUnderLength(\"-1\", lastPart);\n  }\n  return react_1.default.createElement(react_1.default.Fragment, null, elements);\n}\nexports.LogBoxMessage = LogBoxMessage;","map":{"version":3,"mappings":";;;;;;;;;;;AAOA;AAA0B;AAY1B,IAAMA,YAAY,GAAG,SAAfA,YAAY,CAAIC,OAAe;EAAA,OACnCA,OAAO,CAACC,OAAO,CAAC,mDAAmD,EAAE,EAAE,CAAC;AAAA;AAE1E,SAAgBC,aAAa,CAACC,KAAY;EACxC,qBAA4CA,KAAK,CAACC,OAAO;IAAjDJ,OAAO,kBAAPA,OAAO;IAAEK,aAAa,kBAAbA,aAAa;EAE9B,IAAIF,KAAK,CAACG,SAAS,KAAK,IAAI,EAAE;IAC5B,OAAOC,8BAACC,mBAAI,QAAET,YAAY,CAACC,OAAO,CAAC,CAAQ;;EAG7C,IAAMS,SAAS,GAAGN,KAAK,CAACM,SAAS,IAAI,IAAI,GAAGN,KAAK,CAACM,SAAS,GAAGC,QAAQ;EACtE,IAAMC,iBAAiB,GAAyBR,KAAK,CAACS,KAAK;EAC3D,IAAMC,QAAQ,GAAkB,EAAE;EAClC,IAAIC,MAAM,GAAG,CAAC;EACd,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CACrBC,GAAkB,EAClBZ,OAAe,EACfQ,KAA4B,EAC1B;IACF,IAAIK,YAAY,GAAGlB,YAAY,CAACK,OAAO,CAAC;IAExC,IAAID,KAAK,CAACM,SAAS,IAAI,IAAI,EAAE;MAC3BQ,YAAY,GAAGA,YAAY,CAACC,KAAK,CAAC,CAAC,EAAEf,KAAK,CAACM,SAAS,GAAGK,MAAM,CAAC;;IAGhE,IAAIA,MAAM,GAAGL,SAAS,EAAE;MACtBI,QAAQ,CAACM,IAAI,CACXZ,8BAACC,mBAAI;QAACQ,GAAG,EAAEA,GAAG;QAAEJ,KAAK,EAAEA;MAAK,GACzBK,YAAY,CACR,CACR;;IAGHH,MAAM,IAAIG,YAAY,CAACH,MAAM;EAC/B,CAAC;EAED,IAAMM,UAAU,GAAGf,aAAa,CAACgB,MAAM,CAAC,UAACC,UAAU,EAAEC,YAAY,EAAEC,KAAK,EAAI;IAC1E,IAAMR,GAAG,GAAGS,MAAM,CAACD,KAAK,CAAC;IAEzB,IAAID,YAAY,CAACG,MAAM,GAAGJ,UAAU,EAAE;MACpC,IAAMK,QAAQ,GAAG3B,OAAO,CAAC4B,MAAM,CAC7BN,UAAU,EACVC,YAAY,CAACG,MAAM,GAAGJ,UAAU,CACjC;MAEDP,iBAAiB,CAACC,GAAG,EAAEW,QAAQ,CAAC;;IAGlC,IAAME,gBAAgB,GAAG7B,OAAO,CAAC4B,MAAM,CACrCL,YAAY,CAACG,MAAM,EACnBH,YAAY,CAACT,MAAM,CACpB;IAEDC,iBAAiB,CAACC,GAAG,GAAG,IAAI,EAAEa,gBAAgB,EAAElB,iBAAiB,CAAC;IAClE,OAAOY,YAAY,CAACG,MAAM,GAAGH,YAAY,CAACT,MAAM;EAClD,CAAC,EAAE,CAAC,CAAC;EAEL,IAAIM,UAAU,GAAGpB,OAAO,CAACc,MAAM,EAAE;IAC/B,IAAMgB,QAAQ,GAAG9B,OAAO,CAAC4B,MAAM,CAACR,UAAU,CAAC;IAC3CL,iBAAiB,CAAC,IAAI,EAAEe,QAAQ,CAAC;;EAGnC,OAAOvB,8DAAGM,QAAQ,CAAI;AACxB;AA5DAkB","names":["cleanContent","content","replace","LogBoxMessage","props","message","substitutions","plaintext","react_1","react_native_1","maxLength","Infinity","substitutionStyle","style","elements","length","createUnderLength","key","cleanMessage","slice","push","lastOffset","reduce","prevOffset","substitution","index","String","offset","prevPart","substr","substititionPart","lastPart","exports"],"sourceRoot":"","sources":["../../../src/error-overlay/UI/LogBoxMessage.tsx"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from \"react\";\nimport { StyleProp, Text, TextStyle } from \"react-native\";\n\nimport type { Message } from \"../Data/parseLogBoxLog\";\n\ntype Props = {\n  message: Message;\n  style: StyleProp<TextStyle>;\n  plaintext?: boolean;\n  maxLength?: number;\n};\n\nconst cleanContent = (content: string) =>\n  content.replace(/^(TransformError |Warning: (Warning: )?|Error: )/g, \"\");\n\nexport function LogBoxMessage(props: Props): JSX.Element {\n  const { content, substitutions }: Message = props.message;\n\n  if (props.plaintext === true) {\n    return <Text>{cleanContent(content)}</Text>;\n  }\n\n  const maxLength = props.maxLength != null ? props.maxLength : Infinity;\n  const substitutionStyle: StyleProp<TextStyle> = props.style;\n  const elements: JSX.Element[] = [];\n  let length = 0;\n  const createUnderLength = (\n    key: string | \"-1\",\n    message: string,\n    style?: StyleProp<TextStyle>\n  ) => {\n    let cleanMessage = cleanContent(message);\n\n    if (props.maxLength != null) {\n      cleanMessage = cleanMessage.slice(0, props.maxLength - length);\n    }\n\n    if (length < maxLength) {\n      elements.push(\n        <Text key={key} style={style}>\n          {cleanMessage}\n        </Text>\n      );\n    }\n\n    length += cleanMessage.length;\n  };\n\n  const lastOffset = substitutions.reduce((prevOffset, substitution, index) => {\n    const key = String(index);\n\n    if (substitution.offset > prevOffset) {\n      const prevPart = content.substr(\n        prevOffset,\n        substitution.offset - prevOffset\n      );\n\n      createUnderLength(key, prevPart);\n    }\n\n    const substititionPart = content.substr(\n      substitution.offset,\n      substitution.length\n    );\n\n    createUnderLength(key + \".5\", substititionPart, substitutionStyle);\n    return substitution.offset + substitution.length;\n  }, 0);\n\n  if (lastOffset < content.length) {\n    const lastPart = content.substr(lastOffset);\n    createUnderLength(\"-1\", lastPart);\n  }\n\n  return <>{elements}</>;\n}\n"]},"metadata":{},"sourceType":"script"}